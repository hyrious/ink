{"version":3,"file":"index-CYC4ccks.js","sources":["../../src/base.ts","../../src/spring.ts","../../src/stroke.ts","../../main.ts"],"sourcesContent":["export const clamp = (value: number, min: number, max: number) => value < min ? min : value > max ? max : value;\n\nexport interface IPoint {\n  readonly x: number;\n  readonly y: number;\n}\n\nexport interface IRectangle extends IPoint {\n  readonly width: number;\n  readonly height: number;\n}\n\nexport class Vec {\n  /// @internal\n  constructor(\n    readonly x: number,\n    readonly y: number,\n  ) { }\n\n  static of(x: number, y: number) {\n    return new Vec(x, y);\n  }\n\n  static from(vec: IPoint) {\n    return new Vec(vec.x, vec.y);\n  }\n\n  add(other: IPoint) {\n    return new Vec(this.x + other.x, this.y + other.y);\n  }\n\n  subtract(other: IPoint) {\n    return new Vec(this.x - other.x, this.y - other.y);\n  }\n\n  multiply(scalar: number) {\n    return new Vec(this.x * scalar, this.y * scalar);\n  }\n\n  normalize(d = Math.hypot(this.x, this.y)) {\n    return new Vec(this.x / d, this.y / d);\n  }\n\n  /// Rotate the vector by 90 degrees. → becomes ↑\n  permutate() {\n    return new Vec(-this.y, this.x);\n  }\n\n  negative() {\n    return new Vec(-this.x, -this.y);\n  }\n\n  middle(other: IPoint) {\n    return new Vec((this.x + other.x) / 2, (this.y + other.y) / 2);\n  }\n\n  /// Rotate the vector around a center point.\n  rotate(center: IPoint, radius: number) {\n    const s = Math.sin(radius), c = Math.cos(radius),\n          px = this.x - center.x, py = this.y - center.y,\n          nx = px * c - py * s, ny = px * s + py * c;\n    return new Vec(nx + center.x, ny + center.y);\n  }\n\n  dot(other: IPoint) {\n    return this.x * other.x + this.y * other.y;\n  }\n\n  lerp(other: IPoint, t: number) {\n    return new Vec(this.x + (other.x - this.x) * t, this.y + (other.y - this.y) * t);\n  }\n\n  project(other: IPoint, c: number) {\n    return new Vec(this.x + other.x * c, this.y + other.y * c);\n  }\n}\n","const enum C {\n  initial = 0.36,\n  timespan = 0.016667,\n  stiffness = 0.75,\n  damping = 0.25,\n  precision = 0.01,\n}\n\nexport class Spring {\n  value = C.initial\n  last = C.initial\n  target = C.initial\n  set(target: number): this {\n    this.target = target\n    return this\n  }\n  update(dt?: number): number {\n    if (!dt) dt = C.timespan\n    if (this.value >= 0 && this.target >= 0 && this.last >= 0) {\n      let v = this.target\n      let delta = v - this.value\n      let velocity = (this.value - this.last) / dt\n      let spring = C.stiffness * delta\n      let damper = C.damping * velocity\n      let acceleration = spring - damper\n      let d = (velocity + acceleration) * dt\n      this.last = this.value\n      if (Math.abs(d) < C.precision && Math.abs(delta) < C.precision) {\n        this.value = this.target\n      } else {\n        this.value += d\n      }\n    }\n    return this.value\n  }\n}\n","//\n// Strokes are made up of a series of points, each point may have a pressure and a timestamp.\n// The algorithm's goal is to calculate a smooth outline of these points with known information.\n// The basic idea is each stroke is affected by 2 factors:\n//\n// - \"Thinning\": The stroke will be thinner if the pressure is lower and\n//               distance per interval between points become longer.\n//               Without timestamp we can assume the interval is constant.\n//\n// - \"Spreading\": The last several points will spread (be bigger) even after you lift the pen.\n//\n\nimport { clamp, IPoint, Vec } from \"./base\";\nimport { Spring } from \"./spring\";\n\n/// The data structure for raw input point, should be easy to convert from pointer events.\nexport class RawPoint implements IPoint {\n  /// @internal\n  constructor(\n    readonly x: number,\n    readonly y: number,\n    /// Pressure, range from 0 to 1. Use 0.5 for no-pressure cases.\n    readonly p: number,\n    /// Timestamp in milliseconds. Use 0 for no-timestamp cases.\n    readonly t: number,\n  ) { }\n\n  /// Construct a RawPoint from x, y, pressure and timestamp.\n  static of(x: number, y: number, pressure: number, timestamp: number) {\n    return new RawPoint(x, y, pressure, timestamp);\n  }\n\n  /// Construct a RawPoint from a PointerEvent.\n  /// The position is from clientX and clientY, which may not be the best choice\n  /// for draw boards supporting pinch and zoom. Use {@link RawPoint.of} instead.\n  static fromEvent(event: PointerEvent, pressure = clamp(event.pressure || 0.5, 0, 1)) {\n    // Some stylus devices may report zero pressure, treat as no-pressure.\n    return new RawPoint(event.clientX, event.clientY, pressure, event.timeStamp);\n  }\n\n  /// @internal\n  static fromJSON(json: any) {\n    return new RawPoint(json.x, json.y, json.p, json.t);\n  }\n}\n\n/// The data structure for a point in a stroke, it has context information like\n/// its direction, distance to the previous point, and running length.\nexport class Point {\n  /// @internal\n  constructor(\n    readonly p: RawPoint,\n    /// Inverted direction of this point, equals to `previous - current`.\n    /// The first point's direction is the same as the second point.\n    readonly v: Vec,\n    /// Distance to the previous point, equals to `hypot(previous - current)`.\n    readonly d: number,\n    /// Running length from the first point to this point.\n    readonly l: number,\n  ) { }\n\n  static of(point: RawPoint, vector: Vec, distance: number, length: number) {\n    return new Point(point, vector, distance, length);\n  }\n\n  /// @internal\n  static fromJSON(json: any) {\n    return new Point(RawPoint.fromJSON(json.p), Vec.from(json.v), json.d, json.l);\n  }\n}\n\n// Constants which should not be exported as options.\nconst enum C {\n  // Skip points that are too close.\n  SkipDistance = 4,\n  // If the tail's length > `TailDistance * size`, draw a thinner tail,\n  // otherwise draw an end cap.\n  TailInterval = 100, TailDistance = 0.4,\n  // Math.PI + 0.0001 to prevent floating number issue when drawing the cap.\n  PI = 3.1416926535897933,\n  // Simulate pressure for mouse and trackpad.\n  PressureChangeSpeed = 0.7,\n  // Approximate ratio that multiplies `size` to draw a dot.\n  DotSize = 0.36,\n  // Minimal stroke width / 2.\n  MinRadius = 0.75,\n  // Spreading interval in milliseconds.\n  SpreadInterval = 300,\n  // Spreading amount per interval.\n  SpreadAmount = 0.12,\n}\n\n/// @internal Increase each point's pressure in the next period with a small amount.\nfunction pressureTillNow(p: Point, now: number) {\n  if (now - p.p.t > C.SpreadInterval) return Math.min(p.p.p + C.SpreadAmount, 1);\n  return Math.min(p.p.p + C.SpreadAmount * (now - p.p.t) / C.SpreadInterval, 1);\n}\n\n/// @internal Increase pressure for the next period with a small amount.\nfunction pressureTillNow2(p: number, t: number, now: number) {\n  if (now - t > C.SpreadInterval) return Math.min(p + C.SpreadAmount, 1);\n  return Math.min(p + C.SpreadAmount * (now - t) / C.SpreadInterval, 1);\n}\n\n/// The data structure for a stroke.\nexport class Stroke {\n  /// Indexes to split {@link Stroke.points} into curves. The first index is always `0`.\n  readonly segments: number[] = [0]\n  /// @internal See {@link Stroke.insert}.\n  readonly pending: { [from: number]: RawPoint[] } = { __proto__: null } as any\n\n  /// @internal\n  constructor(\n    /// The stroke's points. It grows on {@link Stroke.insert} and {@link Stroke.push}.\n    readonly points: Point[],\n    /// The stroke's length, equals to `points.at(-1).l`.\n    /// {@link Stroke.insert} and {@link Stroke.push} will update this value.\n    readonly length = points.length > 0 ? points[points.length - 1].l : 0,\n  ) { }\n\n  /// Create a stroke from raw points.\n  static of(raw: RawPoint[] = []): Stroke {\n    let stroke = new Stroke([], 0)\n    for (let p of raw) stroke._push(p)\n    stroke._updateSegments()\n    return stroke\n  }\n\n  /// Revive a stroke from `JSON.parse(JSON.stringify(oldStroke))`.\n  static fromJSON(json: any) {\n    let stroke = new Stroke(json.points.map(Point.fromJSON), json.length);\n    (stroke as { segments: number[] }).segments = json.segments;\n    (stroke as { pending: { [from: number]: RawPoint[] } }).pending = json.pending;\n    return stroke;\n  }\n\n  /// True when no points in the stroke.\n  get empty() { return this.length == 0 }\n\n  /// True when the stroke has only one point.\n  get dot() { return this.points.length == 1 }\n\n  /// Update the stroke with new points inserted from `from`.\n  /// The `from` can exceed the stroke's length, where the points will be\n  // pending until there be new points fill the gap.\n  insert(from: number, raw: RawPoint[]): this {\n    if (from == this.points.length) {\n      for (let p of raw) this._push(p)\n      from = this.points.length\n      if (raw = this.pending[from]) {\n        delete this.pending[from]\n        this.insert(from, raw)\n      }\n      // Recursively call {@link Stroke.insert} to flush pending points.\n      // Ensure a {@link Stroke._updateSegments} is called at the end of the recursion.\n      else {\n        this._updateSegments()\n      }\n    }\n    else if (from > this.points.length) {\n      this.pending[from] = raw\n    }\n    else {\n      throw new RangeError(`Position ${from} conflicts with existing points`)\n    }\n    return this\n  }\n\n  /// Update the stroke by pushing new points to the end.\n  push(raw: RawPoint): this {\n    this._push(raw)\n    this._updateSegments()\n    return this\n  }\n\n  /// @internal This method does not call `_updateSegments`.\n  _push(raw: RawPoint) {\n    let points = this.points\n    if (points.length > 0) {\n      let prev = points[points.length - 1]\n      let d = Math.hypot(raw.x - prev.p.x, raw.y - prev.p.y)\n      this._updateLength(d)\n      if (this.length - prev.l < C.SkipDistance) {\n        // Skip this point, but preserve its pressure.\n        (prev.p as { p: number }).p = Math.max(prev.p.p, raw.p)\n        return\n      }\n      points.push(Point.of(raw, Vec.from(raw).subtract(prev.p).normalize(), d, this.length))\n    } else {\n      points.push(Point.of(raw, Vec.of(0, 0), 0, 0))\n    }\n  }\n\n  /// Is the stroke still \"spreading\"?\n  isSpreading(now = performance.now()): boolean {\n    return this.points.length > 0 && now - this.points[this.points.length - 1].p.t < C.SpreadInterval\n  }\n\n  /// Compute the outline points of the segment starting at `from`.\n  /// Returns an empty array if `from` is not in {@link Stroke.segments}.\n  /// The `size` is the full width when pressure is 1.\n  outline(from: number, size: number, now = performance.now()): IPoint[] {\n    let end = this.segments.find(end => from < end)\n    let points = this.points.slice(from > 0 ? from - 1 : from, end)\n    if (points.length > 1) {\n      let leftPoints: Vec[] = [], rightPoints: Vec[] = [], length = points.length,\n          radius = size, prevPressure = points[0].p.p, drawEndCap = true,\n          prevTimestamp = 0, spring = new Spring()\n      // Draw a tail if the last segment is long enough.\n      if (end == null && length >= 2) {\n        // The last point is maybe a predicted point (no sense), so use the one before it.\n        let p2 = points[length - 2]\n        // The precisely comparing to 0.5 and 1.0 is probably a mouse event generated by chrome or firefox.\n        if (p2.p.p == 0.5 || p2.p.p == 1) {\n          // Get the distance of tail in some time, if it is long enough then draw a tail.\n          let d = p2.d, p1 = p2, t = 0\n          for (let i = length - 3; i >= 0; i--) {\n            p1 = points[i]\n            d += p1.d\n            t = p2.p.t - p1.p.t\n            if (t <= 0 || t > C.TailInterval) break\n          }\n          if (d > C.TailDistance * size) {\n            drawEndCap = false\n          }\n        }\n      }\n      // Simulate pressure and push points.\n      for (let i = 0; i < length; i++) {\n        let { p, v, d } = points[i]\n        // Fix first point's distance and direction (assume the same as the next point).\n        if (i == 0) {\n          d = 0\n          v = points[1].v\n        }\n        let sp = Math.min(1, d / size), rp = Math.min(1, 1 - sp),\n            pressure = Math.min(1, prevPressure + (rp - prevPressure) * (sp * C.PressureChangeSpeed)),\n            nextVector = (i < length - 1 ? points[i + 1] : points[i]).v,\n            nextDot = i < length - 1 ? v.dot(nextVector) : 1\n\n        pressure = spring.set(pressure).update(prevTimestamp && (p.t - prevTimestamp) / 1000)\n        // Tail case.\n        if (!drawEndCap) {\n          if (i == length - 1) pressure = 0.05\n          if (i == length - 2) pressure = Math.max(0.1, pressure - 0.2)\n          if (i == length - 3) pressure = Math.max(0.1, pressure - 0.1)\n        }\n\n        radius = clamp(size * 0.5 * pressureTillNow2(pressure, p.t, now), C.MinRadius, size / 2)\n\n        let offset = nextVector.lerp(v, nextDot).permutate().multiply(radius),\n            pl = Vec.from(p).subtract(offset),\n            pr = Vec.from(p).add(offset)\n\n        leftPoints.push(pl)\n        rightPoints.push(pr)\n\n        prevTimestamp = p.t\n        prevPressure = p.p\n      }\n      let startCap: Vec[] = [], firstPoint = rightPoints[0], endCap: Vec[] = []\n      for (let step = 1 / 13, t = 0; t <= 1; t += step) {\n        startCap.push(firstPoint.rotate(points[0].p, C.PI * t))\n      }\n      if (drawEndCap) {\n        let lastPoint = points[length - 1],\n            direction = lastPoint.v.negative().permutate(),\n            start = Vec.from(lastPoint.p).project(direction, radius)\n        for (let step = 1 / 13, t = 0; t < 1; t += step) {\n          endCap.push(start.rotate(lastPoint.p, C.PI * t))\n        }\n      }\n      return leftPoints.concat(endCap, rightPoints.reverse(), startCap)\n    }\n    // Dot case.\n    else if (points.length == 1) {\n      let p = points[0],\n          start = Vec.from(p.p).project(Vec.of(1, 0), size * C.DotSize * pressureTillNow(p, now)),\n          circle: Vec[] = []\n      for (let step = 1 / 13, t = 0; t <= 2; t += step) {\n        circle.push(start.rotate(p.p, C.PI * t))\n      }\n      return circle\n    }\n    else {\n      return []\n    }\n  }\n\n  /// Construct an SVG path string from raw points with basic smoothing.\n  stroke(points: IPoint[] = this.points.map(p => p.p)): string {\n    let n = points.length\n    if (n == 0) return \"\"\n    let prev = points[0], path = `M${prev.x.toFixed(2)},${prev.y.toFixed(2)}`\n    for (let i = 1; i < n; i++) {\n      let curr = points[i], middle = Vec.from(prev).middle(curr)\n      if (i == 1) path += `L${middle.x.toFixed(2)},${middle.y.toFixed(2)}`\n      else path += `Q${prev.x.toFixed(2)},${prev.y.toFixed(2)} ${middle.x.toFixed(2)},${middle.y.toFixed(2)}`\n      prev = curr\n    }\n    if (n > 1) path += `L${prev.x.toFixed(2)},${prev.y.toFixed(2)}`\n    return path\n  }\n\n  /// @internal Increase the running length.\n  _updateLength(d: number) {\n    (this as { length: number }).length += d\n  }\n\n  /// @internal Update {@link Stroke.segments} using current {@link Stroke.points}.\n  _updateSegments() {\n    let segments = this.segments, points = this.points, n = points.length\n    for (let i = segments[segments.length - 1] + 1; i < n; i++) {\n      if (points[i].v.dot(points[i - 1].v) < 0) {\n        segments.push(i)\n        i++\n      }\n    }\n  }\n}\n","import { clamp, RawPoint, Stroke } from './src/ink'\n\nlet $root = document.getElementById('app')!\nlet $svg = $root.appendChild(document.createElementNS('http://www.w3.org/2000/svg', 'svg'))\nlet $mask = $root.appendChild(document.createElement('div'))\nlet $settings = {\n  color: document.getElementById('stroke-color') as HTMLInputElement,\n  size: document.getElementById('stroke-size') as HTMLInputElement,\n  clear: document.getElementById('clear') as HTMLButtonElement,\n  undo: document.getElementById('undo') as HTMLButtonElement,\n  redo: document.getElementById('redo') as HTMLButtonElement,\n  pressure: document.getElementById('pressure') as HTMLInputElement,\n  eraser: document.getElementById('eraser') as HTMLInputElement,\n  smooth: document.getElementById('smooth') as HTMLSelectElement,\n}\n\nlet defaultPressure = $settings.pressure.checked\nlet defaultSmooth = $settings.smooth.value\nlet defaultSize = $settings.size.valueAsNumber\n\n$svg.setAttribute('fill-rule', 'nonzero')\n$svg.setAttribute('fill', 'currentColor')\n$svg.style.cssText = `display: block; width: 100%; height: 100%;\nfont-size: 0; touch-action: none; position: relative; contain: content;\noverflow: hidden; overscroll-behavior: none;`\n\n$mask.style.cssText = `display: none; position: absolute; top: 0; left: 0; width: 100%; height: 100%;\ntouch-action: none; contain: content; z-index: 1;`\n\nlet matchDark = matchMedia('(prefers-color-scheme: dark)')\nlet defaultColor = () => matchDark.matches ? '#ffffff' : '#000000'\n$settings.color.value = defaultColor()\n\n$settings.color.onchange = $settings.color.oninput = () => {\n  refreshUrl()\n}\n\n$settings.size.onchange = $settings.size.oninput = () => {\n  refreshUrl()\n}\n\n$settings.clear.onclick = () => {\n  let current = Array.from($svg.children)\n  $svg.textContent = ''\n  undoStack.commit(\n    () => $svg.append(...current),\n    () => $svg.textContent = '',\n  )\n}\n\n$settings.undo.onclick = () => undoStack.undo()\n$settings.redo.onclick = () => undoStack.redo()\n\nlet pressure: 0.5 | undefined\n\n$settings.pressure.oninput = () => {\n  pressure = $settings.pressure.checked ? void 0 : 0.5\n  refreshUrl()\n}\n\n$settings.smooth.onchange = $settings.smooth.oninput = () => {\n  refreshUrl()\n}\n\n$settings.eraser.oninput = () => {\n  let erasing = $settings.eraser.checked\n  $mask.style.cursor = erasing ? `url(https://api.iconify.design/mdi:eraser.svg?color=${encodeURIComponent($settings.color.value)}) 12 32, auto` : 'default'\n  $mask.style.display = erasing ? 'block' : 'none'\n}\n\nfor (let i = 1; i <= 15; i++) {\n  let $option = document.createElement('option')\n  $option.value = $option.textContent = String(i)\n  $settings.smooth.appendChild($option)\n}\n\nlet search = new URL(location.href).searchParams\nif (search.has('color')) {\n  $settings.color.value = '#' + search.get('color')!\n}\nif (search.has('size')) {\n  $settings.size.value = search.get('size')!\n}\nif (search.has('pressure')) {\n  $settings.pressure.checked = search.get('pressure') !== '0'\n  $settings.pressure.dispatchEvent(new InputEvent('input'))\n}\nif (search.has('smooth')) {\n  $settings.smooth.value = search.get('smooth')!\n}\n\nlet refreshUrl = () => {\n  let replacement = ''\n  if ($settings.color.value !== defaultColor()) {\n    replacement += `&color=${$settings.color.value.slice(1)}`\n  }\n  if ($settings.size.valueAsNumber !== defaultSize) {\n    replacement += `&size=${$settings.size.valueAsNumber}`\n  }\n  if ($settings.pressure.checked !== defaultPressure) {\n    replacement += `&pressure=${$settings.pressure.checked ? 1 : 0}`\n  }\n  if ($settings.smooth.value !== defaultSmooth) {\n    replacement += `&smooth=${$settings.smooth.value}`\n  }\n   history.replaceState({}, \"\", replacement ? replacement.replace('&', '?') : location.pathname)\n}\n\nlet running = new Map<number, PointerEvent>()\n\n$svg.onpointerdown = (e) => {\n  let id = e.pointerId\n  if (running.has(id)) onCancel(id)\n  running.set(id, e)\n  e.preventDefault()\n  e.stopPropagation()\n  $svg.setPointerCapture(id)\n  // Ideally it should save $svg.getBoundingClientRect() for calculating the offset.\n  // In our demo case the offset is always 0.\n  onOpen(id, RawPoint.fromEvent(e, pressure))\n}\n\n$svg.onpointermove = (e) => {\n  let id = e.pointerId\n  e.preventDefault()\n  e.stopPropagation()\n  if (running.has(id)) {\n    let e0 = running.get(id)!\n    // Apple pencil's bug, it fires 2 identical events.\n    if (e0.clientX === e.clientX && e0.clientY === e.clientY) return\n    running.set(id, e)\n    if (!!e.getCoalescedEvents) for (let ev of e.getCoalescedEvents()) {\n      onUpdate(id, RawPoint.fromEvent(ev, pressure))\n    } else {\n      onUpdate(id, RawPoint.fromEvent(e, pressure))\n    }\n  }\n}\n\n$svg.onpointerup = $svg.onpointerout = (e) => {\n  let id = e.pointerId\n  e.preventDefault()\n  e.stopPropagation()\n  if (running.has(id)) {\n    if (!!e.getPredictedEvents) {\n      // Use last point's predict result instead of this pointerup event.\n      let ev = running.get(id)!.getPredictedEvents()[0]\n      if (ev) onUpdate(id, RawPoint.fromEvent(ev, pressure))\n    }\n    onClose(id)\n    running.delete(id)\n  }\n}\n\n$svg.onpointercancel = (e) => {\n  let id = e.pointerId\n  e.preventDefault()\n  e.stopPropagation()\n  if (running.has(id)) {\n    onCancel(id)\n    running.delete(id)\n  }\n}\n\n$svg.ontouchstart = $svg.ontouchmove = $svg.ontouchend = $svg.ontouchcancel = (e) => {\n  e.preventDefault()\n  e.stopPropagation()\n}\n\nlet eraserLastPoint: RawPoint | undefined\n\n$mask.onpointerdown = (e) => {\n  e.preventDefault()\n  e.stopPropagation()\n  $mask.setPointerCapture(e.pointerId)\n  onErase(eraserLastPoint = RawPoint.fromEvent(e))\n}\n\n$mask.onpointermove = (e) => {\n  if (eraserLastPoint) {\n    e.preventDefault()\n    e.stopPropagation()\n    let current = RawPoint.fromEvent(e)\n    onErase(current)\n    eraserLastPoint = current\n  }\n}\n\n$mask.onpointerup = $mask.onpointerout = (e) => {\n  eraserLastPoint = void 0\n}\n\n$mask.ontouchstart = $mask.ontouchmove = $mask.ontouchend = $mask.ontouchcancel = (e) => {\n  e.preventDefault()\n  e.stopPropagation()\n}\n\nlet undoStack = {\n  index: 0,\n  stack: [],\n  get undoable() { return this.index > 0 },\n  get redoable() { return this.index < this.stack.length },\n  commit(undo: () => void, redo: () => void) {\n    this.stack[this.index] = { undo, redo }\n    this.index++\n    // Max 20 steps.\n    while (this.stack.length > 20) {\n      this.stack.shift()\n      this.index--\n    }\n    // Delete all redos.\n    this.stack.length = this.index\n    this.update()\n  },\n  undo() {\n    if (this.undoable) {\n      this.index--\n      this.stack[this.index].undo()\n      this.update()\n    }\n  },\n  redo() {\n    if (this.redoable) {\n      this.stack[this.index].redo()\n      this.index++\n      this.update()\n    }\n  },\n  update() {\n    $settings.undo.disabled = !this.undoable\n    $settings.redo.disabled = !this.redoable\n  }\n}\n\ninterface IQueue<T> {\n  push(item: T): this\n  /// Push the last element again, return undefined if no such element.\n  dup(): this | undefined\n  /// Get computed item.\n  get(): T\n}\n\nclass Queue1<T> implements IQueue<T> {\n  item: T | undefined\n\n  push(item: T) {\n    this.item = item\n    return this\n  }\n\n  dup() {\n    if (this.item) return this\n  }\n\n  get() {\n    return this.item!\n  }\n}\n\nclass Queue<T> implements IQueue<T> {\n  items: T[] = []\n  size = 0\n\n  constructor(\n    readonly compute: (items: T[]) => T,\n    readonly capacity = 2,\n  ) { }\n\n  push(item: T): this {\n    this.items.push(item)\n    this.size++\n    while (this.size > this.capacity) {\n      this.items.shift()\n      this.size--\n    }\n    return this\n  }\n\n  dup(): this | undefined {\n    if (this.size > 0) {\n      return this.push(this.items[this.items.length - 1])\n    }\n  }\n\n  get(): T {\n    return this.compute(this.items)\n  }\n}\n\nlet averagePoint = (ps: RawPoint[]): RawPoint => {\n  // Use average x, y and latest p, t.\n  let sum_x = 0, sum_y = 0, pressure = 0.5, timestamp = 0\n  for (let p of ps) {\n    sum_x += p.x\n    sum_y += p.y\n    pressure = p.p\n    timestamp = p.t\n  }\n  return RawPoint.of(sum_x / ps.length, sum_y / ps.length, pressure, timestamp)\n}\n\nlet createQueue = (p: RawPoint): IQueue<RawPoint> => {\n  if ($settings.smooth.value == '0') {\n    return new Queue1<RawPoint>().push(p)\n  } else {\n    let size = Number.parseInt($settings.smooth.value) + 1\n    return new Queue<RawPoint>(averagePoint, size).push(p)\n  }\n}\n\nlet strokes: { [id: number]: [Stroke, SVGPathElement] } = {}\nlet queue: { [id: number]: IQueue<RawPoint> } = {}\nlet dirty: { [id: number]: true } = {}\n\nlet onOpen = (id: number, p: RawPoint) => {\n  let stroke = Stroke.of([p])\n  let $path = $svg.appendChild(document.createElementNS('http://www.w3.org/2000/svg', 'path'))\n  $path.style.pointerEvents = 'none'\n  $path.style.fill = $settings.color.value\n  strokes[id] = [stroke, $path]\n  queue[id] = createQueue(p)\n  dirty[id] = true\n  render()\n}\n\nlet onUpdate = (id: number, p: RawPoint) => {\n  if (strokes[id]) {\n    strokes[id][0].push(queue[id].push(p).get())\n    dirty[id] = true\n    render()\n    requestAnimation()\n  }\n}\n\nlet onCancel = (id: number) => {\n  if (strokes[id]) {\n    strokes[id][1].remove()\n    delete queue[id]\n    delete strokes[id]\n    delete dirty[id]\n  }\n}\n\nlet onClose = (id: number) => {\n  if (strokes[id]) {\n    let [stroke, $path] = strokes[id]\n    let commit = true\n    if (stroke.empty && !stroke.dot) {\n      $path.remove()\n      commit = false\n    }\n    render()\n    delete queue[id]\n    delete dirty[id]\n    requestAnimation()\n    if (commit) undoStack.commit(\n      () => $path.remove(),\n      // The z-index is not correct, but this demo does not care about it.\n      () => $svg.append($path),\n    )\n  }\n}\n\nlet onErase = (p: RawPoint) => {\n  let point = $svg.createSVGPoint()\n  point.x = p.x\n  point.y = p.y\n  for (let $path of $svg.children as unknown as SVGPathElement[]) {\n    $path.isPointInFill(point) && $path.remove()\n  }\n  if (eraserLastPoint) {\n    let dx = p.x - eraserLastPoint.x, dy = p.y - eraserLastPoint.y\n    for (let x = 0; x < 1; x += 0.1) {\n      let point = $svg.createSVGPoint()\n      point.x = p.x - x * dx\n      point.y = p.y - x * dy\n      for (let $path of $svg.children as unknown as SVGPathElement[]) {\n        $path.isPointInFill(point) && $path.remove()\n      }\n    }\n  }\n}\n\n// This happens synchronously, without even a microtask.\nlet render = () => {\n  let size = $settings.size.valueAsNumber\n  for (let id in dirty) {\n    if (strokes[id]) {\n      let [stroke, $path] = strokes[id], d = ''\n      for (let index of stroke.segments) {\n        let outline = stroke.outline(index, size)\n        d += stroke.stroke(outline)\n      }\n      $path.setAttribute('d', d)\n    }\n    delete dirty[id]\n  }\n}\n\nlet animateId = 0\n\nlet requestAnimation = () => {\n  cancelAnimationFrame(animateId)\n  animateId = requestAnimationFrame(updateAnimation)\n}\n\nlet updateAnimation = () => {\n  render()\n  let schedule = false\n  for (let id in strokes) {\n    let q = queue[id]?.dup()\n    if (q) strokes[id][0].push(q.get())\n    if (strokes[id][0].isSpreading()) {\n      dirty[id] = true\n      schedule = true\n    }\n  }\n  if (schedule) requestAnimation()\n}\n\nlet isMac = /Mac/.test(navigator.platform)\n\ndocument.onkeydown = (ev) => {\n  let ctrl = ev.ctrlKey, shift = ev.shiftKey, meta = ev.metaKey, alt = ev.altKey, code = ev.keyCode\n  let primary = isMac ? meta : ctrl\n\n  const click = (btn: HTMLInputElement | HTMLButtonElement) => {\n    ev.preventDefault()\n    btn.focus(); btn.click()\n  }\n\n  if (!ctrl && !shift && !meta && !alt) {\n    if (code == 80)\n      if ($settings.eraser.checked)\n        click($settings.eraser)\n      else\n        click($settings.pressure)\n    if (code == 69) click($settings.eraser) \n    if (code == 219 || code == 221) {\n      let size = $settings.size.valueAsNumber, inc = code == 221 ? 5 : -5\n      $settings.size.value = '' + clamp(size + inc, +$settings.size.min, +$settings.size.max)\n    }\n  } else if (primary && !shift && code == 90) {\n    click($settings.undo)\n  } else if (primary && shift && code == 90) {\n    click($settings.redo)\n  }\n}\n\nObject.assign(globalThis, {\n  $settings, $svg, strokes, dirty, undoStack,\n})\n"],"names":["clamp","value","min","max","Vec","x","y","vec","other","scalar","d","center","radius","s","c","px","py","nx","ny","t","Spring","target","dt","delta","velocity","spring","damper","acceleration","RawPoint","p","pressure","timestamp","event","json","Point","v","l","point","vector","distance","length","pressureTillNow","now","pressureTillNow2","Stroke","points","raw","stroke","from","prev","size","end","leftPoints","rightPoints","prevPressure","drawEndCap","prevTimestamp","p2","p1","i","sp","rp","nextVector","nextDot","offset","pl","pr","startCap","firstPoint","endCap","step","lastPoint","direction","start","circle","n","path","curr","middle","segments","$root","$svg","$mask","$settings","defaultPressure","defaultSmooth","defaultSize","matchDark","defaultColor","refreshUrl","current","undoStack","erasing","$option","search","replacement","running","id","onOpen","e0","ev","onUpdate","onClose","onCancel","eraserLastPoint","onErase","undo","redo","Queue1","item","Queue","compute","capacity","averagePoint","ps","sum_x","sum_y","createQueue","strokes","queue","dirty","$path","render","requestAnimation","commit","dx","dy","index","outline","animateId","updateAnimation","_a","schedule","q","isMac","ctrl","shift","meta","alt","code","primary","click","btn","inc"],"mappings":"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"}