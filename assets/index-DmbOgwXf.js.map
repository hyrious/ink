{"version":3,"file":"index-DmbOgwXf.js","sources":["../../node_modules/.pnpm/polyclip-ts@0.16.5/node_modules/polyclip-ts/dist/constant.js","../../node_modules/.pnpm/polyclip-ts@0.16.5/node_modules/polyclip-ts/dist/compare.js","../../node_modules/.pnpm/polyclip-ts@0.16.5/node_modules/polyclip-ts/dist/orient.js","../../node_modules/.pnpm/bignumber.js@9.1.2/node_modules/bignumber.js/bignumber.mjs","../../node_modules/.pnpm/splaytree-ts@1.0.1/node_modules/splaytree-ts/dist/index.js","../../node_modules/.pnpm/polyclip-ts@0.16.5/node_modules/polyclip-ts/dist/identity.js","../../node_modules/.pnpm/polyclip-ts@0.16.5/node_modules/polyclip-ts/dist/snap.js","../../node_modules/.pnpm/polyclip-ts@0.16.5/node_modules/polyclip-ts/dist/precision.js","../../node_modules/.pnpm/polyclip-ts@0.16.5/node_modules/polyclip-ts/dist/bbox.js","../../node_modules/.pnpm/polyclip-ts@0.16.5/node_modules/polyclip-ts/dist/vector.js","../../node_modules/.pnpm/polyclip-ts@0.16.5/node_modules/polyclip-ts/dist/sweep-event.js","../../node_modules/.pnpm/polyclip-ts@0.16.5/node_modules/polyclip-ts/dist/segment.js","../../node_modules/.pnpm/polyclip-ts@0.16.5/node_modules/polyclip-ts/dist/geom-in.js","../../node_modules/.pnpm/polyclip-ts@0.16.5/node_modules/polyclip-ts/dist/geom-out.js","../../node_modules/.pnpm/polyclip-ts@0.16.5/node_modules/polyclip-ts/dist/sweep-line.js","../../node_modules/.pnpm/polyclip-ts@0.16.5/node_modules/polyclip-ts/dist/operation.js","../../node_modules/.pnpm/polyclip-ts@0.16.5/node_modules/polyclip-ts/dist/index.js","../../src/vec.ts","../../src/input.ts","../../src/ink.ts","../../main.ts"],"sourcesContent":["export default (x) => {\n    return () => {\n        return x;\n    };\n};\n","import constant from \"./constant.js\";\nexport default (eps) => {\n    const almostEqual = eps ? (a, b) => b.minus(a).abs().isLessThanOrEqualTo(eps)\n        : constant(false);\n    return (a, b) => {\n        if (almostEqual(a, b))\n            return 0;\n        return a.comparedTo(b);\n    };\n};\n","import constant from \"./constant.js\";\nexport default function (eps) {\n    const almostCollinear = eps ? (area2, ax, ay, cx, cy) => area2.exponentiatedBy(2).isLessThanOrEqualTo(cx.minus(ax).exponentiatedBy(2).plus(cy.minus(ay).exponentiatedBy(2))\n        .times(eps))\n        : constant(false);\n    return (a, b, c) => {\n        const ax = a.x, ay = a.y, cx = c.x, cy = c.y;\n        const area2 = ay.minus(cy).times(b.x.minus(cx)).minus(ax.minus(cx).times(b.y.minus(cy)));\n        if (almostCollinear(area2, ax, ay, cx, cy))\n            return 0;\n        return area2.comparedTo(0);\n    };\n}\n","/*\r\n *      bignumber.js v9.1.2\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\nvar\r\n  isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n  mathceil = Math.ceil,\r\n  mathfloor = Math.floor,\r\n\r\n  bignumberError = '[BigNumber Error] ',\r\n  tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n  BASE = 1e14,\r\n  LOG_BASE = 14,\r\n  MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n  SQRT_BASE = 1e7,\r\n\r\n  // EDITABLE\r\n  // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n  // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n  MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n/*\r\n * Create and return a BigNumber constructor.\r\n */\r\nfunction clone(configObject) {\r\n  var div, convertBase, parseNumeric,\r\n    P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n    ONE = new BigNumber(1),\r\n\r\n\r\n    //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n    // The default values below must be integers within the inclusive ranges stated.\r\n    // The values can also be changed at run-time using BigNumber.set.\r\n\r\n    // The maximum number of decimal places for operations involving division.\r\n    DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n    // The rounding mode used when rounding to the above decimal places, and when using\r\n    // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n    // UP         0 Away from zero.\r\n    // DOWN       1 Towards zero.\r\n    // CEIL       2 Towards +Infinity.\r\n    // FLOOR      3 Towards -Infinity.\r\n    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n    // The exponent value at and beneath which toString returns exponential notation.\r\n    // Number type: -7\r\n    TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n    // The exponent value at and above which toString returns exponential notation.\r\n    // Number type: 21\r\n    TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n    // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n    // The minimum exponent value, beneath which underflow to zero occurs.\r\n    // Number type: -324  (5e-324)\r\n    MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n    // The maximum exponent value, above which overflow to Infinity occurs.\r\n    // Number type:  308  (1.7976931348623157e+308)\r\n    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n    MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n    // Whether to use cryptographically-secure random number generation, if available.\r\n    CRYPTO = false,                          // true or false\r\n\r\n    // The modulo mode used when calculating the modulus: a mod n.\r\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n    // The remainder (r) is calculated as: r = a - n * q.\r\n    //\r\n    // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n    // DOWN      1 The remainder has the same sign as the dividend.\r\n    //             This modulo mode is commonly known as 'truncated division' and is\r\n    //             equivalent to (a % n) in JavaScript.\r\n    // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n    //             The remainder is always positive.\r\n    //\r\n    // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n    // modes are commonly used for the modulus operation.\r\n    // Although the other rounding modes can also be used, they may not give useful results.\r\n    MODULO_MODE = 1,                         // 0 to 9\r\n\r\n    // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n    // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n    POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n    // The format specification used by the BigNumber.prototype.toFormat method.\r\n    FORMAT = {\r\n      prefix: '',\r\n      groupSize: 3,\r\n      secondaryGroupSize: 0,\r\n      groupSeparator: ',',\r\n      decimalSeparator: '.',\r\n      fractionGroupSize: 0,\r\n      fractionGroupSeparator: '\\xA0',        // non-breaking space\r\n      suffix: ''\r\n    },\r\n\r\n    // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n    // '-', '.', whitespace, or repeated character.\r\n    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\r\n    alphabetHasNormalDecimalDigits = true;\r\n\r\n\r\n  //------------------------------------------------------------------------------------------\r\n\r\n\r\n  // CONSTRUCTOR\r\n\r\n\r\n  /*\r\n   * The BigNumber constructor and exported function.\r\n   * Create and return a new instance of a BigNumber object.\r\n   *\r\n   * v {number|string|BigNumber} A numeric value.\r\n   * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n   */\r\n  function BigNumber(v, b) {\r\n    var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n      x = this;\r\n\r\n    // Enable constructor call without `new`.\r\n    if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n    if (b == null) {\r\n\r\n      if (v && v._isBigNumber === true) {\r\n        x.s = v.s;\r\n\r\n        if (!v.c || v.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n        } else if (v.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = v.e;\r\n          x.c = v.c.slice();\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n        // Use `1 / n` to handle minus zero also.\r\n        x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n        // Fast path for integers, where n < 2147483648 (2**31).\r\n        if (v === ~~v) {\r\n          for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n          if (e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else {\r\n            x.e = e;\r\n            x.c = [v];\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        str = String(v);\r\n      } else {\r\n\r\n        if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n        x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n      // Exponential form?\r\n      if ((i = str.search(/e/i)) > 0) {\r\n\r\n        // Determine exponent.\r\n        if (e < 0) e = i;\r\n        e += +str.slice(i + 1);\r\n        str = str.substring(0, i);\r\n      } else if (e < 0) {\r\n\r\n        // Integer.\r\n        e = str.length;\r\n      }\r\n\r\n    } else {\r\n\r\n      // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n      intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n      // Allow exponential notation to be used with base 10 argument, while\r\n      // also rounding to DECIMAL_PLACES as with other bases.\r\n      if (b == 10 && alphabetHasNormalDecimalDigits) {\r\n        x = new BigNumber(v);\r\n        return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n      }\r\n\r\n      str = String(v);\r\n\r\n      if (isNum = typeof v == 'number') {\r\n\r\n        // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n        if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n        x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n          throw Error\r\n           (tooManyDigits + v);\r\n        }\r\n      } else {\r\n        x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      alphabet = ALPHABET.slice(0, b);\r\n      e = i = 0;\r\n\r\n      // Check that str is a valid base b number.\r\n      // Don't use RegExp, so alphabet can contain special characters.\r\n      for (len = str.length; i < len; i++) {\r\n        if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n          if (c == '.') {\r\n\r\n            // If '.' is not the first character and it has not be found before.\r\n            if (i > e) {\r\n              e = len;\r\n              continue;\r\n            }\r\n          } else if (!caseChanged) {\r\n\r\n            // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n            if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n              caseChanged = true;\r\n              i = -1;\r\n              e = 0;\r\n              continue;\r\n            }\r\n          }\r\n\r\n          return parseNumeric(x, String(v), isNum, b);\r\n        }\r\n      }\r\n\r\n      // Prevent later check for length on converted number.\r\n      isNum = false;\r\n      str = convertBase(str, b, 10, x.s);\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n      else e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n    if (str = str.slice(i, ++len)) {\r\n      len -= i;\r\n\r\n      // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n      if (isNum && BigNumber.DEBUG &&\r\n        len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n          throw Error\r\n           (tooManyDigits + (x.s * v));\r\n      }\r\n\r\n       // Overflow?\r\n      if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        x.c = x.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      } else {\r\n        x.e = e;\r\n        x.c = [];\r\n\r\n        // Transform base\r\n\r\n        // e is the base 10 exponent.\r\n        // i is where to slice str to get the first element of the coefficient array.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n        if (i < len) {\r\n          if (i) x.c.push(+str.slice(0, i));\r\n\r\n          for (len -= LOG_BASE; i < len;) {\r\n            x.c.push(+str.slice(i, i += LOG_BASE));\r\n          }\r\n\r\n          i = LOG_BASE - (str = str.slice(i)).length;\r\n        } else {\r\n          i -= len;\r\n        }\r\n\r\n        for (; i--; str += '0');\r\n        x.c.push(+str);\r\n      }\r\n    } else {\r\n\r\n      // Zero.\r\n      x.c = [x.e = 0];\r\n    }\r\n  }\r\n\r\n\r\n  // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n  BigNumber.clone = clone;\r\n\r\n  BigNumber.ROUND_UP = 0;\r\n  BigNumber.ROUND_DOWN = 1;\r\n  BigNumber.ROUND_CEIL = 2;\r\n  BigNumber.ROUND_FLOOR = 3;\r\n  BigNumber.ROUND_HALF_UP = 4;\r\n  BigNumber.ROUND_HALF_DOWN = 5;\r\n  BigNumber.ROUND_HALF_EVEN = 6;\r\n  BigNumber.ROUND_HALF_CEIL = 7;\r\n  BigNumber.ROUND_HALF_FLOOR = 8;\r\n  BigNumber.EUCLID = 9;\r\n\r\n\r\n  /*\r\n   * Configure infrequently-changing library-wide settings.\r\n   *\r\n   * Accept an object with the following optional properties (if the value of a property is\r\n   * a number, it must be an integer within the inclusive range stated):\r\n   *\r\n   *   DECIMAL_PLACES   {number}           0 to MAX\r\n   *   ROUNDING_MODE    {number}           0 to 8\r\n   *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n   *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n   *   CRYPTO           {boolean}          true or false\r\n   *   MODULO_MODE      {number}           0 to 9\r\n   *   POW_PRECISION       {number}           0 to MAX\r\n   *   ALPHABET         {string}           A string of two or more unique characters which does\r\n   *                                       not contain '.'.\r\n   *   FORMAT           {object}           An object with some of the following properties:\r\n   *     prefix                 {string}\r\n   *     groupSize              {number}\r\n   *     secondaryGroupSize     {number}\r\n   *     groupSeparator         {string}\r\n   *     decimalSeparator       {string}\r\n   *     fractionGroupSize      {number}\r\n   *     fractionGroupSeparator {string}\r\n   *     suffix                 {string}\r\n   *\r\n   * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n   *\r\n   * E.g.\r\n   * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n   *\r\n   * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n   *\r\n   * Return an object with the properties current values.\r\n   */\r\n  BigNumber.config = BigNumber.set = function (obj) {\r\n    var p, v;\r\n\r\n    if (obj != null) {\r\n\r\n      if (typeof obj == 'object') {\r\n\r\n        // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          DECIMAL_PLACES = v;\r\n        }\r\n\r\n        // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n        // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 8, p);\r\n          ROUNDING_MODE = v;\r\n        }\r\n\r\n        // EXPONENTIAL_AT {number|number[]}\r\n        // Integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n        // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, 0, p);\r\n            intCheck(v[1], 0, MAX, p);\r\n            TO_EXP_NEG = v[0];\r\n            TO_EXP_POS = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n          }\r\n        }\r\n\r\n        // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n        // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n        if (obj.hasOwnProperty(p = 'RANGE')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, -1, p);\r\n            intCheck(v[1], 1, MAX, p);\r\n            MIN_EXP = v[0];\r\n            MAX_EXP = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            if (v) {\r\n              MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' cannot be zero: ' + v);\r\n            }\r\n          }\r\n        }\r\n\r\n        // CRYPTO {boolean} true or false.\r\n        // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n        // '[BigNumber Error] crypto unavailable'\r\n        if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n          v = obj[p];\r\n          if (v === !!v) {\r\n            if (v) {\r\n              if (typeof crypto != 'undefined' && crypto &&\r\n               (crypto.getRandomValues || crypto.randomBytes)) {\r\n                CRYPTO = v;\r\n              } else {\r\n                CRYPTO = !v;\r\n                throw Error\r\n                 (bignumberError + 'crypto unavailable');\r\n              }\r\n            } else {\r\n              CRYPTO = v;\r\n            }\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' not true or false: ' + v);\r\n          }\r\n        }\r\n\r\n        // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n        // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 9, p);\r\n          MODULO_MODE = v;\r\n        }\r\n\r\n        // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          POW_PRECISION = v;\r\n        }\r\n\r\n        // FORMAT {object}\r\n        // '[BigNumber Error] FORMAT not an object: {v}'\r\n        if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n          v = obj[p];\r\n          if (typeof v == 'object') FORMAT = v;\r\n          else throw Error\r\n           (bignumberError + p + ' not an object: ' + v);\r\n        }\r\n\r\n        // ALPHABET {string}\r\n        // '[BigNumber Error] ALPHABET invalid: {v}'\r\n        if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n          v = obj[p];\r\n\r\n          // Disallow if less than two characters,\r\n          // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n          if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n            alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\r\n            ALPHABET = v;\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' invalid: ' + v);\r\n          }\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Object expected: {v}'\r\n        throw Error\r\n         (bignumberError + 'Object expected: ' + obj);\r\n      }\r\n    }\r\n\r\n    return {\r\n      DECIMAL_PLACES: DECIMAL_PLACES,\r\n      ROUNDING_MODE: ROUNDING_MODE,\r\n      EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n      RANGE: [MIN_EXP, MAX_EXP],\r\n      CRYPTO: CRYPTO,\r\n      MODULO_MODE: MODULO_MODE,\r\n      POW_PRECISION: POW_PRECISION,\r\n      FORMAT: FORMAT,\r\n      ALPHABET: ALPHABET\r\n    };\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if v is a BigNumber instance, otherwise return false.\r\n   *\r\n   * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n   *\r\n   * v {any}\r\n   *\r\n   * '[BigNumber Error] Invalid BigNumber: {v}'\r\n   */\r\n  BigNumber.isBigNumber = function (v) {\r\n    if (!v || v._isBigNumber !== true) return false;\r\n    if (!BigNumber.DEBUG) return true;\r\n\r\n    var i, n,\r\n      c = v.c,\r\n      e = v.e,\r\n      s = v.s;\r\n\r\n    out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n      if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n        // If the first element is zero, the BigNumber value must be zero.\r\n        if (c[0] === 0) {\r\n          if (e === 0 && c.length === 1) return true;\r\n          break out;\r\n        }\r\n\r\n        // Calculate number of digits that c[0] should have, based on the exponent.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (i < 1) i += LOG_BASE;\r\n\r\n        // Calculate number of digits of c[0].\r\n        //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n        if (String(c[0]).length == i) {\r\n\r\n          for (i = 0; i < c.length; i++) {\r\n            n = c[i];\r\n            if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n          }\r\n\r\n          // Last element cannot be zero, unless it is the only element.\r\n          if (n !== 0) return true;\r\n        }\r\n      }\r\n\r\n    // Infinity/NaN\r\n    } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n      return true;\r\n    }\r\n\r\n    throw Error\r\n      (bignumberError + 'Invalid BigNumber: ' + v);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.maximum = BigNumber.max = function () {\r\n    return maxOrMin(arguments, -1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.minimum = BigNumber.min = function () {\r\n    return maxOrMin(arguments, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n   * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n   * zeros are produced).\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n   * '[BigNumber Error] crypto unavailable'\r\n   */\r\n  BigNumber.random = (function () {\r\n    var pow2_53 = 0x20000000000000;\r\n\r\n    // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n    // Check if Math.random() produces more than 32 bits of randomness.\r\n    // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n    // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n    var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n     ? function () { return mathfloor(Math.random() * pow2_53); }\r\n     : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n       (Math.random() * 0x800000 | 0); };\r\n\r\n    return function (dp) {\r\n      var a, b, e, k, v,\r\n        i = 0,\r\n        c = [],\r\n        rand = new BigNumber(ONE);\r\n\r\n      if (dp == null) dp = DECIMAL_PLACES;\r\n      else intCheck(dp, 0, MAX);\r\n\r\n      k = mathceil(dp / LOG_BASE);\r\n\r\n      if (CRYPTO) {\r\n\r\n        // Browsers supporting crypto.getRandomValues.\r\n        if (crypto.getRandomValues) {\r\n\r\n          a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n          for (; i < k;) {\r\n\r\n            // 53 bits:\r\n            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n            //                                     11111 11111111 11111111\r\n            // 0x20000 is 2^21.\r\n            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n            // Rejection sampling:\r\n            // 0 <= v < 9007199254740992\r\n            // Probability that v >= 9e15, is\r\n            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n            if (v >= 9e15) {\r\n              b = crypto.getRandomValues(new Uint32Array(2));\r\n              a[i] = b[0];\r\n              a[i + 1] = b[1];\r\n            } else {\r\n\r\n              // 0 <= v <= 8999999999999999\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 2;\r\n            }\r\n          }\r\n          i = k / 2;\r\n\r\n        // Node.js supporting crypto.randomBytes.\r\n        } else if (crypto.randomBytes) {\r\n\r\n          // buffer\r\n          a = crypto.randomBytes(k *= 7);\r\n\r\n          for (; i < k;) {\r\n\r\n            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n            // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n            // 0 <= v < 9007199254740992\r\n            v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n               (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n               (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n            if (v >= 9e15) {\r\n              crypto.randomBytes(7).copy(a, i);\r\n            } else {\r\n\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 7;\r\n            }\r\n          }\r\n          i = k / 7;\r\n        } else {\r\n          CRYPTO = false;\r\n          throw Error\r\n           (bignumberError + 'crypto unavailable');\r\n        }\r\n      }\r\n\r\n      // Use Math.random.\r\n      if (!CRYPTO) {\r\n\r\n        for (; i < k;) {\r\n          v = random53bitInt();\r\n          if (v < 9e15) c[i++] = v % 1e14;\r\n        }\r\n      }\r\n\r\n      k = c[--i];\r\n      dp %= LOG_BASE;\r\n\r\n      // Convert trailing digits to zeros according to dp.\r\n      if (k && dp) {\r\n        v = POWS_TEN[LOG_BASE - dp];\r\n        c[i] = mathfloor(k / v) * v;\r\n      }\r\n\r\n      // Remove trailing elements which are zero.\r\n      for (; c[i] === 0; c.pop(), i--);\r\n\r\n      // Zero?\r\n      if (i < 0) {\r\n        c = [e = 0];\r\n      } else {\r\n\r\n        // Remove leading elements which are zero and adjust exponent accordingly.\r\n        for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n        // Count the digits of the first element of c to determine leading zeros, and...\r\n        for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n        // adjust the exponent accordingly.\r\n        if (i < LOG_BASE) e -= LOG_BASE - i;\r\n      }\r\n\r\n      rand.e = e;\r\n      rand.c = c;\r\n      return rand;\r\n    };\r\n  })();\r\n\r\n\r\n   /*\r\n   * Return a BigNumber whose value is the sum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.sum = function () {\r\n    var i = 1,\r\n      args = arguments,\r\n      sum = new BigNumber(args[0]);\r\n    for (; i < args.length;) sum = sum.plus(args[i++]);\r\n    return sum;\r\n  };\r\n\r\n\r\n  // PRIVATE FUNCTIONS\r\n\r\n\r\n  // Called by BigNumber and BigNumber.prototype.toString.\r\n  convertBase = (function () {\r\n    var decimal = '0123456789';\r\n\r\n    /*\r\n     * Convert string of baseIn to an array of numbers of baseOut.\r\n     * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n     * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n     */\r\n    function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n      var j,\r\n        arr = [0],\r\n        arrL,\r\n        i = 0,\r\n        len = str.length;\r\n\r\n      for (; i < len;) {\r\n        for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n        arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n        for (j = 0; j < arr.length; j++) {\r\n\r\n          if (arr[j] > baseOut - 1) {\r\n            if (arr[j + 1] == null) arr[j + 1] = 0;\r\n            arr[j + 1] += arr[j] / baseOut | 0;\r\n            arr[j] %= baseOut;\r\n          }\r\n        }\r\n      }\r\n\r\n      return arr.reverse();\r\n    }\r\n\r\n    // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n    // If the caller is toString, we are converting from base 10 to baseOut.\r\n    // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n    return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n      var alphabet, d, e, k, r, x, xc, y,\r\n        i = str.indexOf('.'),\r\n        dp = DECIMAL_PLACES,\r\n        rm = ROUNDING_MODE;\r\n\r\n      // Non-integer.\r\n      if (i >= 0) {\r\n        k = POW_PRECISION;\r\n\r\n        // Unlimited precision.\r\n        POW_PRECISION = 0;\r\n        str = str.replace('.', '');\r\n        y = new BigNumber(baseIn);\r\n        x = y.pow(str.length - i);\r\n        POW_PRECISION = k;\r\n\r\n        // Convert str as if an integer, then restore the fraction part by dividing the\r\n        // result by its base raised to a power.\r\n\r\n        y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n         10, baseOut, decimal);\r\n        y.e = y.c.length;\r\n      }\r\n\r\n      // Convert the number as integer.\r\n\r\n      xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n       ? (alphabet = ALPHABET, decimal)\r\n       : (alphabet = decimal, ALPHABET));\r\n\r\n      // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n      e = k = xc.length;\r\n\r\n      // Remove trailing zeros.\r\n      for (; xc[--k] == 0; xc.pop());\r\n\r\n      // Zero?\r\n      if (!xc[0]) return alphabet.charAt(0);\r\n\r\n      // Does str represent an integer? If so, no need for the division.\r\n      if (i < 0) {\r\n        --e;\r\n      } else {\r\n        x.c = xc;\r\n        x.e = e;\r\n\r\n        // The sign is needed for correct rounding.\r\n        x.s = sign;\r\n        x = div(x, y, dp, rm, baseOut);\r\n        xc = x.c;\r\n        r = x.r;\r\n        e = x.e;\r\n      }\r\n\r\n      // xc now represents str converted to baseOut.\r\n\r\n      // THe index of the rounding digit.\r\n      d = e + dp + 1;\r\n\r\n      // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n      i = xc[d];\r\n\r\n      // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n      k = baseOut / 2;\r\n      r = r || d < 0 || xc[d + 1] != null;\r\n\r\n      r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n            : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n      // If the index of the rounding digit is not greater than zero, or xc represents\r\n      // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n      // such as 0.00001.\r\n      if (d < 1 || !xc[0]) {\r\n\r\n        // 1^-dp or 0\r\n        str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n      } else {\r\n\r\n        // Truncate xc to the required number of decimal places.\r\n        xc.length = d;\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up and so on.\r\n          for (--baseOut; ++xc[--d] > baseOut;) {\r\n            xc[d] = 0;\r\n\r\n            if (!d) {\r\n              ++e;\r\n              xc = [1].concat(xc);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for (k = xc.length; !xc[--k];);\r\n\r\n        // E.g. [4, 11, 15] becomes 4bf.\r\n        for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n        // Add leading zeros, decimal point and trailing zeros as required.\r\n        str = toFixedPoint(str, e, alphabet.charAt(0));\r\n      }\r\n\r\n      // The caller will add the sign.\r\n      return str;\r\n    };\r\n  })();\r\n\r\n\r\n  // Perform division in the specified base. Called by div and convertBase.\r\n  div = (function () {\r\n\r\n    // Assume non-zero x and k.\r\n    function multiply(x, k, base) {\r\n      var m, temp, xlo, xhi,\r\n        carry = 0,\r\n        i = x.length,\r\n        klo = k % SQRT_BASE,\r\n        khi = k / SQRT_BASE | 0;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        xlo = x[i] % SQRT_BASE;\r\n        xhi = x[i] / SQRT_BASE | 0;\r\n        m = khi * xlo + xhi * klo;\r\n        temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n        carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n        x[i] = temp % base;\r\n      }\r\n\r\n      if (carry) x = [carry].concat(x);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, cmp;\r\n\r\n      if (aL != bL) {\r\n        cmp = aL > bL ? 1 : -1;\r\n      } else {\r\n\r\n        for (i = cmp = 0; i < aL; i++) {\r\n\r\n          if (a[i] != b[i]) {\r\n            cmp = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return cmp;\r\n    }\r\n\r\n    function subtract(a, b, aL, base) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * base + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n    }\r\n\r\n    // x: dividend, y: divisor.\r\n    return function (x, y, dp, rm, base) {\r\n      var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n        yL, yz,\r\n        s = x.s == y.s ? 1 : -1,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      // Either NaN, Infinity or 0?\r\n      if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n        return new BigNumber(\r\n\r\n         // Return NaN if either NaN, or both Infinity or 0.\r\n         !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n          // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n          xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n       );\r\n      }\r\n\r\n      q = new BigNumber(s);\r\n      qc = q.c = [];\r\n      e = x.e - y.e;\r\n      s = dp + e + 1;\r\n\r\n      if (!base) {\r\n        base = BASE;\r\n        e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n        s = s / LOG_BASE | 0;\r\n      }\r\n\r\n      // Result exponent may be one less then the current value of e.\r\n      // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n      for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n      if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n      if (s < 0) {\r\n        qc.push(1);\r\n        more = true;\r\n      } else {\r\n        xL = xc.length;\r\n        yL = yc.length;\r\n        i = 0;\r\n        s += 2;\r\n\r\n        // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n        n = mathfloor(base / (yc[0] + 1));\r\n\r\n        // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n        // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n        if (n > 1) {\r\n          yc = multiply(yc, n, base);\r\n          xc = multiply(xc, n, base);\r\n          yL = yc.length;\r\n          xL = xc.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xc.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL; rem[remL++] = 0);\r\n        yz = yc.slice();\r\n        yz = [0].concat(yz);\r\n        yc0 = yc[0];\r\n        if (yc[1] >= base / 2) yc0++;\r\n        // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n        // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n        do {\r\n          n = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yc, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, n.\r\n\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n            // n is how many times the divisor goes into the current remainder.\r\n            n = mathfloor(rem0 / yc0);\r\n\r\n            //  Algorithm:\r\n            //  product = divisor multiplied by trial digit (n).\r\n            //  Compare product and remainder.\r\n            //  If product is greater than remainder:\r\n            //    Subtract divisor from product, decrement trial digit.\r\n            //  Subtract product from remainder.\r\n            //  If product was less than remainder at the last compare:\r\n            //    Compare new remainder and divisor.\r\n            //    If remainder is greater than divisor:\r\n            //      Subtract divisor from remainder, increment trial digit.\r\n\r\n            if (n > 1) {\r\n\r\n              // n may be > base only when base is 3.\r\n              if (n >= base) n = base - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiply(yc, n, base);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              // If product > remainder then trial digit n too high.\r\n              // n is 1 too high about 5% of the time, and is not known to have\r\n              // ever been more than 1 too high.\r\n              while (compare(prod, rem, prodL, remL) == 1) {\r\n                n--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                prodL = prod.length;\r\n                cmp = 1;\r\n              }\r\n            } else {\r\n\r\n              // n is 0 or 1, cmp is -1.\r\n              // If n is 0, there is no need to compare yc and rem again below,\r\n              // so change cmp to 1 to avoid it.\r\n              // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n              if (n == 0) {\r\n\r\n                // divisor < remainder, so n must be at least 1.\r\n                cmp = n = 1;\r\n              }\r\n\r\n              // product = divisor\r\n              prod = yc.slice();\r\n              prodL = prod.length;\r\n            }\r\n\r\n            if (prodL < remL) prod = [0].concat(prod);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL, base);\r\n            remL = rem.length;\r\n\r\n             // If product was < remainder.\r\n            if (cmp == -1) {\r\n\r\n              // Compare divisor and new remainder.\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              // Trial digit n too low.\r\n              // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n              while (compare(yc, rem, yL, remL) < 1) {\r\n                n++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                remL = rem.length;\r\n              }\r\n            }\r\n          } else if (cmp === 0) {\r\n            n++;\r\n            rem = [0];\r\n          } // else cmp === 1 and n will be 0\r\n\r\n          // Add the next digit, n, to the result array.\r\n          qc[i++] = n;\r\n\r\n          // Update the remainder.\r\n          if (rem[0]) {\r\n            rem[remL++] = xc[xi] || 0;\r\n          } else {\r\n            rem = [xc[xi]];\r\n            remL = 1;\r\n          }\r\n        } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n        more = rem[0] != null;\r\n\r\n        // Leading zero?\r\n        if (!qc[0]) qc.splice(0, 1);\r\n      }\r\n\r\n      if (base == BASE) {\r\n\r\n        // To calculate q.e, first get the number of digits of qc[0].\r\n        for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n        round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n      // Caller is convertBase.\r\n      } else {\r\n        q.e = e;\r\n        q.r = +more;\r\n      }\r\n\r\n      return q;\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n   * notation rounded to the specified decimal places or significant digits.\r\n   *\r\n   * n: a BigNumber.\r\n   * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n   * rm: the rounding mode.\r\n   * id: 1 (toExponential) or 2 (toPrecision).\r\n   */\r\n  function format(n, i, rm, id) {\r\n    var c0, e, ne, len, str;\r\n\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n\r\n    if (!n.c) return n.toString();\r\n\r\n    c0 = n.c[0];\r\n    ne = n.e;\r\n\r\n    if (i == null) {\r\n      str = coeffToString(n.c);\r\n      str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n       ? toExponential(str, ne)\r\n       : toFixedPoint(str, ne, '0');\r\n    } else {\r\n      n = round(new BigNumber(n), i, rm);\r\n\r\n      // n.e may have changed if the value was rounded up.\r\n      e = n.e;\r\n\r\n      str = coeffToString(n.c);\r\n      len = str.length;\r\n\r\n      // toPrecision returns exponential notation if the number of significant digits\r\n      // specified is less than the number of digits necessary to represent the integer\r\n      // part of the value in fixed-point notation.\r\n\r\n      // Exponential notation.\r\n      if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n        // Append zeros?\r\n        for (; len < i; str += '0', len++);\r\n        str = toExponential(str, e);\r\n\r\n      // Fixed-point notation.\r\n      } else {\r\n        i -= ne;\r\n        str = toFixedPoint(str, e, '0');\r\n\r\n        // Append zeros?\r\n        if (e + 1 > len) {\r\n          if (--i > 0) for (str += '.'; i--; str += '0');\r\n        } else {\r\n          i += e - len;\r\n          if (i > 0) {\r\n            if (e + 1 == len) str += '.';\r\n            for (; i--; str += '0');\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return n.s < 0 && c0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Handle BigNumber.max and BigNumber.min.\r\n  // If any number is NaN, return NaN.\r\n  function maxOrMin(args, n) {\r\n    var k, y,\r\n      i = 1,\r\n      x = new BigNumber(args[0]);\r\n\r\n    for (; i < args.length; i++) {\r\n      y = new BigNumber(args[i]);\r\n      if (!y.s || (k = compare(x, y)) === n || k === 0 && x.s === n) {\r\n        x = y;\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n   * Called by minus, plus and times.\r\n   */\r\n  function normalise(n, c, e) {\r\n    var i = 1,\r\n      j = c.length;\r\n\r\n     // Remove trailing zeros.\r\n    for (; !c[--j]; c.pop());\r\n\r\n    // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n    for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n    // Overflow?\r\n    if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n      // Infinity.\r\n      n.c = n.e = null;\r\n\r\n    // Underflow?\r\n    } else if (e < MIN_EXP) {\r\n\r\n      // Zero.\r\n      n.c = [n.e = 0];\r\n    } else {\r\n      n.e = e;\r\n      n.c = c;\r\n    }\r\n\r\n    return n;\r\n  }\r\n\r\n\r\n  // Handle values that fail the validity test in BigNumber.\r\n  parseNumeric = (function () {\r\n    var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n      dotAfter = /^([^.]+)\\.$/,\r\n      dotBefore = /^\\.([^.]+)$/,\r\n      isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n      whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n    return function (x, str, isNum, b) {\r\n      var base,\r\n        s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n      // No exception on ±Infinity or NaN.\r\n      if (isInfinityOrNaN.test(s)) {\r\n        x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n      } else {\r\n        if (!isNum) {\r\n\r\n          // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n          s = s.replace(basePrefix, function (m, p1, p2) {\r\n            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n            return !b || b == base ? p1 : m;\r\n          });\r\n\r\n          if (b) {\r\n            base = b;\r\n\r\n            // E.g. '1.' to '1', '.1' to '0.1'\r\n            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n          }\r\n\r\n          if (str != s) return new BigNumber(s, base);\r\n        }\r\n\r\n        // '[BigNumber Error] Not a number: {n}'\r\n        // '[BigNumber Error] Not a base {b} number: {n}'\r\n        if (BigNumber.DEBUG) {\r\n          throw Error\r\n            (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n        }\r\n\r\n        // NaN\r\n        x.s = null;\r\n      }\r\n\r\n      x.c = x.e = null;\r\n    }\r\n  })();\r\n\r\n\r\n  /*\r\n   * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n   * If r is truthy, it is known that there are more digits after the rounding digit.\r\n   */\r\n  function round(x, sd, rm, r) {\r\n    var d, i, j, k, n, ni, rd,\r\n      xc = x.c,\r\n      pows10 = POWS_TEN;\r\n\r\n    // if x is not Infinity or NaN...\r\n    if (xc) {\r\n\r\n      // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n      // ni is the index of n within x.c.\r\n      // d is the number of digits of n.\r\n      // i is the index of rd within n including leading zeros.\r\n      // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n      out: {\r\n\r\n        // Get the number of digits of the first element of xc.\r\n        for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n        i = sd - d;\r\n\r\n        // If the rounding digit is in the first element of xc...\r\n        if (i < 0) {\r\n          i += LOG_BASE;\r\n          j = sd;\r\n          n = xc[ni = 0];\r\n\r\n          // Get the rounding digit at index j of n.\r\n          rd = mathfloor(n / pows10[d - j - 1] % 10);\r\n        } else {\r\n          ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n          if (ni >= xc.length) {\r\n\r\n            if (r) {\r\n\r\n              // Needed by sqrt.\r\n              for (; xc.length <= ni; xc.push(0));\r\n              n = rd = 0;\r\n              d = 1;\r\n              i %= LOG_BASE;\r\n              j = i - LOG_BASE + 1;\r\n            } else {\r\n              break out;\r\n            }\r\n          } else {\r\n            n = k = xc[ni];\r\n\r\n            // Get the number of digits of n.\r\n            for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n            // Get the index of rd within n.\r\n            i %= LOG_BASE;\r\n\r\n            // Get the index of rd within n, adjusted for leading zeros.\r\n            // The number of leading zeros of n is given by LOG_BASE - d.\r\n            j = i - LOG_BASE + d;\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);\r\n          }\r\n        }\r\n\r\n        r = r || sd < 0 ||\r\n\r\n        // Are there any non-zero digits after the rounding digit?\r\n        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n         xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n        r = rm < 4\r\n         ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n         : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n           rm == (x.s < 0 ? 8 : 7));\r\n\r\n        if (sd < 1 || !xc[0]) {\r\n          xc.length = 0;\r\n\r\n          if (r) {\r\n\r\n            // Convert sd to decimal places.\r\n            sd -= x.e + 1;\r\n\r\n            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n            x.e = -sd || 0;\r\n          } else {\r\n\r\n            // Zero.\r\n            xc[0] = x.e = 0;\r\n          }\r\n\r\n          return x;\r\n        }\r\n\r\n        // Remove excess digits.\r\n        if (i == 0) {\r\n          xc.length = ni;\r\n          k = 1;\r\n          ni--;\r\n        } else {\r\n          xc.length = ni + 1;\r\n          k = pows10[LOG_BASE - i];\r\n\r\n          // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n          // j > 0 means i > number of leading zeros of n.\r\n          xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n        }\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          for (; ;) {\r\n\r\n            // If the digit to be rounded up is in the first element of xc...\r\n            if (ni == 0) {\r\n\r\n              // i will be the length of xc[0] before k is added.\r\n              for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n              j = xc[0] += k;\r\n              for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n              // if i != k the length has increased.\r\n              if (i != k) {\r\n                x.e++;\r\n                if (xc[0] == BASE) xc[0] = 1;\r\n              }\r\n\r\n              break;\r\n            } else {\r\n              xc[ni] += k;\r\n              if (xc[ni] != BASE) break;\r\n              xc[ni--] = 0;\r\n              k = 1;\r\n            }\r\n          }\r\n        }\r\n\r\n        // Remove trailing zeros.\r\n        for (i = xc.length; xc[--i] === 0; xc.pop());\r\n      }\r\n\r\n      // Overflow? Infinity.\r\n      if (x.e > MAX_EXP) {\r\n        x.c = x.e = null;\r\n\r\n      // Underflow? Zero.\r\n      } else if (x.e < MIN_EXP) {\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function valueOf(n) {\r\n    var str,\r\n      e = n.e;\r\n\r\n    if (e === null) return n.toString();\r\n\r\n    str = coeffToString(n.c);\r\n\r\n    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n      ? toExponential(str, e)\r\n      : toFixedPoint(str, e, '0');\r\n\r\n    return n.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new BigNumber(this);\r\n    if (x.s < 0) x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   *   0 if they have the same value,\r\n   *   or null if the value of either is NaN.\r\n   */\r\n  P.comparedTo = function (y, b) {\r\n    return compare(this, new BigNumber(y, b));\r\n  };\r\n\r\n\r\n  /*\r\n   * If dp is undefined or null or true or false, return the number of decimal places of the\r\n   * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   *\r\n   * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.decimalPlaces = P.dp = function (dp, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), dp + x.e + 1, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last number.\r\n    if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n    if (n < 0) n = 0;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n   * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.dividedBy = P.div = function (y, b) {\r\n    return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n   * BigNumber by the value of BigNumber(y, b).\r\n   */\r\n  P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n    return div(this, new BigNumber(y, b), 0, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n   *\r\n   * If m is present, return the result modulo m.\r\n   * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n   *\r\n   * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n   * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n   *\r\n   * n {number|string|BigNumber} The exponent. An integer.\r\n   * [m] {number|string|BigNumber} The modulus.\r\n   *\r\n   * '[BigNumber Error] Exponent not an integer: {n}'\r\n   */\r\n  P.exponentiatedBy = P.pow = function (n, m) {\r\n    var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n      x = this;\r\n\r\n    n = new BigNumber(n);\r\n\r\n    // Allow NaN and ±Infinity, but not other non-integers.\r\n    if (n.c && !n.isInteger()) {\r\n      throw Error\r\n        (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n    }\r\n\r\n    if (m != null) m = new BigNumber(m);\r\n\r\n    // Exponent of MAX_SAFE_INTEGER is 15.\r\n    nIsBig = n.e > 14;\r\n\r\n    // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n    if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n      // The sign of the result of pow when x is negative depends on the evenness of n.\r\n      // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n      y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));\r\n      return m ? y.mod(m) : y;\r\n    }\r\n\r\n    nIsNeg = n.s < 0;\r\n\r\n    if (m) {\r\n\r\n      // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n      if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n      isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n      if (isModExp) x = x.mod(m);\r\n\r\n    // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n    // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n    } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n      // [1, 240000000]\r\n      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n      // [80000000000000]  [99999750000000]\r\n      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n      // If x is negative and n is odd, k = -0, else k = 0.\r\n      k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n      // If x >= 1, k = ±Infinity.\r\n      if (x.e > -1) k = 1 / k;\r\n\r\n      // If n is negative return ±0, else return ±Infinity.\r\n      return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n    } else if (POW_PRECISION) {\r\n\r\n      // Truncating each coefficient array to a length of k after each multiplication\r\n      // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n      // i.e. there will be a minimum of 28 guard digits retained.\r\n      k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n    }\r\n\r\n    if (nIsBig) {\r\n      half = new BigNumber(0.5);\r\n      if (nIsNeg) n.s = 1;\r\n      nIsOdd = isOdd(n);\r\n    } else {\r\n      i = Math.abs(+valueOf(n));\r\n      nIsOdd = i % 2;\r\n    }\r\n\r\n    y = new BigNumber(ONE);\r\n\r\n    // Performs 54 loop iterations for n of 9007199254740991.\r\n    for (; ;) {\r\n\r\n      if (nIsOdd) {\r\n        y = y.times(x);\r\n        if (!y.c) break;\r\n\r\n        if (k) {\r\n          if (y.c.length > k) y.c.length = k;\r\n        } else if (isModExp) {\r\n          y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (i) {\r\n        i = mathfloor(i / 2);\r\n        if (i === 0) break;\r\n        nIsOdd = i % 2;\r\n      } else {\r\n        n = n.times(half);\r\n        round(n, n.e + 1, 1);\r\n\r\n        if (n.e > 14) {\r\n          nIsOdd = isOdd(n);\r\n        } else {\r\n          i = +valueOf(n);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        }\r\n      }\r\n\r\n      x = x.times(x);\r\n\r\n      if (k) {\r\n        if (x.c && x.c.length > k) x.c.length = k;\r\n      } else if (isModExp) {\r\n        x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n      }\r\n    }\r\n\r\n    if (isModExp) return y;\r\n    if (nIsNeg) y = ONE.div(y);\r\n\r\n    return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n   * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n   */\r\n  P.integerValue = function (rm) {\r\n    var n = new BigNumber(this);\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n    return round(n, n.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isEqualTo = P.eq = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n   */\r\n  P.isFinite = function () {\r\n    return !!this.c;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isGreaterThan = P.gt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n   */\r\n  P.isInteger = function () {\r\n    return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isLessThan = P.lt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n   */\r\n  P.isNaN = function () {\r\n    return !this.s;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is negative, otherwise return false.\r\n   */\r\n  P.isNegative = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is positive, otherwise return false.\r\n   */\r\n  P.isPositive = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n   */\r\n  P.isZero = function () {\r\n    return !!this.c && this.c[0] == 0;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.minus = function (y, b) {\r\n    var i, j, t, xLTy,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.plus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Either Infinity?\r\n      if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n      // Either zero?\r\n      if (!xc[0] || !yc[0]) {\r\n\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n         // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n         ROUNDING_MODE == 3 ? -0 : 0);\r\n      }\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Determine which is the bigger number.\r\n    if (a = xe - ye) {\r\n\r\n      if (xLTy = a < 0) {\r\n        a = -a;\r\n        t = xc;\r\n      } else {\r\n        ye = xe;\r\n        t = yc;\r\n      }\r\n\r\n      t.reverse();\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      for (b = a; b--; t.push(0));\r\n      t.reverse();\r\n    } else {\r\n\r\n      // Exponents equal. Check digit by digit.\r\n      j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n      for (a = b = 0; b < j; b++) {\r\n\r\n        if (xc[b] != yc[b]) {\r\n          xLTy = xc[b] < yc[b];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // x < y? Point xc to the array of the bigger number.\r\n    if (xLTy) {\r\n      t = xc;\r\n      xc = yc;\r\n      yc = t;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    b = (j = yc.length) - (i = xc.length);\r\n\r\n    // Append zeros to xc if shorter.\r\n    // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n    if (b > 0) for (; b--; xc[i++] = 0);\r\n    b = BASE - 1;\r\n\r\n    // Subtract yc from xc.\r\n    for (; j > a;) {\r\n\r\n      if (xc[--j] < yc[j]) {\r\n        for (i = j; i && !xc[--i]; xc[i] = b);\r\n        --xc[i];\r\n        xc[j] += BASE;\r\n      }\r\n\r\n      xc[j] -= yc[j];\r\n    }\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n    // Zero?\r\n    if (!xc[0]) {\r\n\r\n      // Following IEEE 754 (2008) 6.3,\r\n      // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n      y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n      y.c = [y.e = 0];\r\n      return y;\r\n    }\r\n\r\n    // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n    // for finite x and y.\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n   * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n   */\r\n  P.modulo = P.mod = function (y, b) {\r\n    var q, s,\r\n      x = this;\r\n\r\n    y = new BigNumber(y, b);\r\n\r\n    // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n    if (!x.c || !y.s || y.c && !y.c[0]) {\r\n      return new BigNumber(NaN);\r\n\r\n    // Return x if y is Infinity or x is zero.\r\n    } else if (!y.c || x.c && !x.c[0]) {\r\n      return new BigNumber(x);\r\n    }\r\n\r\n    if (MODULO_MODE == 9) {\r\n\r\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n      // r = x - qy    where  0 <= r < abs(y)\r\n      s = y.s;\r\n      y.s = 1;\r\n      q = div(x, y, 0, 3);\r\n      y.s = s;\r\n      q.s *= s;\r\n    } else {\r\n      q = div(x, y, 0, MODULO_MODE);\r\n    }\r\n\r\n    y = x.minus(q.times(y));\r\n\r\n    // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n    if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n   * of BigNumber(y, b).\r\n   */\r\n  P.multipliedBy = P.times = function (y, b) {\r\n    var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n      base, sqrtBase,\r\n      x = this,\r\n      xc = x.c,\r\n      yc = (y = new BigNumber(y, b)).c;\r\n\r\n    // Either NaN, ±Infinity or ±0?\r\n    if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n      // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n      if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n        y.c = y.e = y.s = null;\r\n      } else {\r\n        y.s *= x.s;\r\n\r\n        // Return ±Infinity if either is ±Infinity.\r\n        if (!xc || !yc) {\r\n          y.c = y.e = null;\r\n\r\n        // Return ±0 if either is ±0.\r\n        } else {\r\n          y.c = [0];\r\n          y.e = 0;\r\n        }\r\n      }\r\n\r\n      return y;\r\n    }\r\n\r\n    e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n    y.s *= x.s;\r\n    xcL = xc.length;\r\n    ycL = yc.length;\r\n\r\n    // Ensure xc points to longer array and xcL to its length.\r\n    if (xcL < ycL) {\r\n      zc = xc;\r\n      xc = yc;\r\n      yc = zc;\r\n      i = xcL;\r\n      xcL = ycL;\r\n      ycL = i;\r\n    }\r\n\r\n    // Initialise the result array with zeros.\r\n    for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n    base = BASE;\r\n    sqrtBase = SQRT_BASE;\r\n\r\n    for (i = ycL; --i >= 0;) {\r\n      c = 0;\r\n      ylo = yc[i] % sqrtBase;\r\n      yhi = yc[i] / sqrtBase | 0;\r\n\r\n      for (k = xcL, j = i + k; j > i;) {\r\n        xlo = xc[--k] % sqrtBase;\r\n        xhi = xc[k] / sqrtBase | 0;\r\n        m = yhi * xlo + xhi * ylo;\r\n        xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n        c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n        zc[j--] = xlo % base;\r\n      }\r\n\r\n      zc[j] = c;\r\n    }\r\n\r\n    if (c) {\r\n      ++e;\r\n    } else {\r\n      zc.splice(0, 1);\r\n    }\r\n\r\n    return normalise(y, zc, e);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n   * i.e. multiplied by -1.\r\n   */\r\n  P.negated = function () {\r\n    var x = new BigNumber(this);\r\n    x.s = -x.s || null;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.plus = function (y, b) {\r\n    var t,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n     if (a != b) {\r\n      y.s = -b;\r\n      return x.minus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Return ±Infinity if either ±Infinity.\r\n      if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n      // Either zero?\r\n      // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n      if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n    if (a = xe - ye) {\r\n      if (a > 0) {\r\n        ye = xe;\r\n        t = yc;\r\n      } else {\r\n        a = -a;\r\n        t = xc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (; a--; t.push(0));\r\n      t.reverse();\r\n    }\r\n\r\n    a = xc.length;\r\n    b = yc.length;\r\n\r\n    // Point xc to the longer array, and b to the shorter length.\r\n    if (a - b < 0) {\r\n      t = yc;\r\n      yc = xc;\r\n      xc = t;\r\n      b = a;\r\n    }\r\n\r\n    // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n    for (a = 0; b;) {\r\n      a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n      xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n    }\r\n\r\n    if (a) {\r\n      xc = [a].concat(xc);\r\n      ++ye;\r\n    }\r\n\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    // ye = MAX_EXP + 1 possible\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   * If sd is undefined or null or true or false, return the number of significant digits of\r\n   * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   * If sd is true include integer-part trailing zeros in the count.\r\n   *\r\n   * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n   *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.precision = P.sd = function (sd, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (sd != null && sd !== !!sd) {\r\n      intCheck(sd, 1, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), sd, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    v = c.length - 1;\r\n    n = v * LOG_BASE + 1;\r\n\r\n    if (v = c[v]) {\r\n\r\n      // Subtract the number of trailing zeros of the last element.\r\n      for (; v % 10 == 0; v /= 10, n--);\r\n\r\n      // Add the number of digits of the first element.\r\n      for (v = c[0]; v >= 10; v /= 10, n++);\r\n    }\r\n\r\n    if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n   * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n   *\r\n   * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n   */\r\n  P.shiftedBy = function (k) {\r\n    intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n    return this.times('1e' + k);\r\n  };\r\n\r\n\r\n  /*\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N) =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I) =  I\r\n   *  sqrt(0) =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n   * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var m, n, r, rep, t,\r\n      x = this,\r\n      c = x.c,\r\n      s = x.s,\r\n      e = x.e,\r\n      dp = DECIMAL_PLACES + 4,\r\n      half = new BigNumber('0.5');\r\n\r\n    // Negative/NaN/Infinity/zero?\r\n    if (s !== 1 || !c || !c[0]) {\r\n      return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n    }\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+valueOf(x));\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = coeffToString(c);\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(+n);\r\n      e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new BigNumber(n);\r\n    } else {\r\n      r = new BigNumber(s + '');\r\n    }\r\n\r\n    // Check for zero.\r\n    // r could be zero if MIN_EXP is changed after the this value was created.\r\n    // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n    // coeffToString to throw.\r\n    if (r.c[0]) {\r\n      e = r.e;\r\n      s = e + dp;\r\n      if (s < 3) s = 0;\r\n\r\n      // Newton-Raphson iteration.\r\n      for (; ;) {\r\n        t = r;\r\n        r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n        if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n          // The exponent of r may here be one less than the final result exponent,\r\n          // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n          // are indexed correctly.\r\n          if (r.e < e) --s;\r\n          n = n.slice(s - 3, s + 1);\r\n\r\n          // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n          // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n          // iteration.\r\n          if (n == '9999' || !rep && n == '4999') {\r\n\r\n            // On the first iteration only, check to see if rounding up gives the\r\n            // exact result as the nines may infinitely repeat.\r\n            if (!rep) {\r\n              round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n              if (t.times(t).eq(x)) {\r\n                r = t;\r\n                break;\r\n              }\r\n            }\r\n\r\n            dp += 4;\r\n            s += 4;\r\n            rep = 1;\r\n          } else {\r\n\r\n            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n            // result. If not, then there are further digits and m will be truthy.\r\n            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n              // Truncate to the first rounding digit.\r\n              round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n              m = !r.times(r).eq(x);\r\n            }\r\n\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in exponential notation and\r\n   * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp++;\r\n    }\r\n    return format(this, dp, rm, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n   * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n   * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp = dp + this.e + 1;\r\n    }\r\n    return format(this, dp, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n   * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n   * of the format or FORMAT object (see BigNumber.set).\r\n   *\r\n   * The formatting object may contain some or all of the properties shown below.\r\n   *\r\n   * FORMAT = {\r\n   *   prefix: '',\r\n   *   groupSize: 3,\r\n   *   secondaryGroupSize: 0,\r\n   *   groupSeparator: ',',\r\n   *   decimalSeparator: '.',\r\n   *   fractionGroupSize: 0,\r\n   *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n   *   suffix: ''\r\n   * };\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   * [format] {object} Formatting options. See FORMAT pbject above.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   * '[BigNumber Error] Argument not an object: {format}'\r\n   */\r\n  P.toFormat = function (dp, rm, format) {\r\n    var str,\r\n      x = this;\r\n\r\n    if (format == null) {\r\n      if (dp != null && rm && typeof rm == 'object') {\r\n        format = rm;\r\n        rm = null;\r\n      } else if (dp && typeof dp == 'object') {\r\n        format = dp;\r\n        dp = rm = null;\r\n      } else {\r\n        format = FORMAT;\r\n      }\r\n    } else if (typeof format != 'object') {\r\n      throw Error\r\n        (bignumberError + 'Argument not an object: ' + format);\r\n    }\r\n\r\n    str = x.toFixed(dp, rm);\r\n\r\n    if (x.c) {\r\n      var i,\r\n        arr = str.split('.'),\r\n        g1 = +format.groupSize,\r\n        g2 = +format.secondaryGroupSize,\r\n        groupSeparator = format.groupSeparator || '',\r\n        intPart = arr[0],\r\n        fractionPart = arr[1],\r\n        isNeg = x.s < 0,\r\n        intDigits = isNeg ? intPart.slice(1) : intPart,\r\n        len = intDigits.length;\r\n\r\n      if (g2) {\r\n        i = g1;\r\n        g1 = g2;\r\n        g2 = i;\r\n        len -= i;\r\n      }\r\n\r\n      if (g1 > 0 && len > 0) {\r\n        i = len % g1 || g1;\r\n        intPart = intDigits.substr(0, i);\r\n        for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n        if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n        if (isNeg) intPart = '-' + intPart;\r\n      }\r\n\r\n      str = fractionPart\r\n       ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n        ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n         '$&' + (format.fractionGroupSeparator || ''))\r\n        : fractionPart)\r\n       : intPart;\r\n    }\r\n\r\n    return (format.prefix || '') + str + (format.suffix || '');\r\n  };\r\n\r\n\r\n  /*\r\n   * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n   * fraction with an integer numerator and an integer denominator.\r\n   * The denominator will be a positive non-zero value less than or equal to the specified\r\n   * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n   * the lowest value necessary to represent the number exactly.\r\n   *\r\n   * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n   *\r\n   * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n   */\r\n  P.toFraction = function (md) {\r\n    var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n      x = this,\r\n      xc = x.c;\r\n\r\n    if (md != null) {\r\n      n = new BigNumber(md);\r\n\r\n      // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n      if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n        throw Error\r\n          (bignumberError + 'Argument ' +\r\n            (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n      }\r\n    }\r\n\r\n    if (!xc) return new BigNumber(x);\r\n\r\n    d = new BigNumber(ONE);\r\n    n1 = d0 = new BigNumber(ONE);\r\n    d1 = n0 = new BigNumber(ONE);\r\n    s = coeffToString(xc);\r\n\r\n    // Determine initial denominator.\r\n    // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n    e = d.e = s.length - x.e - 1;\r\n    d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n    md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n    exp = MAX_EXP;\r\n    MAX_EXP = 1 / 0;\r\n    n = new BigNumber(s);\r\n\r\n    // n0 = d1 = 0\r\n    n0.c[0] = 0;\r\n\r\n    for (; ;)  {\r\n      q = div(n, d, 0, 1);\r\n      d2 = d0.plus(q.times(d1));\r\n      if (d2.comparedTo(md) == 1) break;\r\n      d0 = d1;\r\n      d1 = d2;\r\n      n1 = n0.plus(q.times(d2 = n1));\r\n      n0 = d2;\r\n      d = n.minus(q.times(d2 = d));\r\n      n = d2;\r\n    }\r\n\r\n    d2 = div(md.minus(d0), d1, 0, 1);\r\n    n0 = n0.plus(d2.times(n1));\r\n    d0 = d0.plus(d2.times(d1));\r\n    n0.s = n1.s = x.s;\r\n    e = e * 2;\r\n\r\n    // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n    r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n        div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n    MAX_EXP = exp;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this BigNumber converted to a number primitive.\r\n   */\r\n  P.toNumber = function () {\r\n    return +valueOf(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n   * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n   * necessary to represent the integer part of the value in fixed-point notation, then use\r\n   * exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    if (sd != null) intCheck(sd, 1, MAX);\r\n    return format(this, sd, rm, 2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n   * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n   * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n   * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n   * TO_EXP_NEG, return exponential notation.\r\n   *\r\n   * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n   *\r\n   * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n   */\r\n  P.toString = function (b) {\r\n    var str,\r\n      n = this,\r\n      s = n.s,\r\n      e = n.e;\r\n\r\n    // Infinity or NaN?\r\n    if (e === null) {\r\n      if (s) {\r\n        str = 'Infinity';\r\n        if (s < 0) str = '-' + str;\r\n      } else {\r\n        str = 'NaN';\r\n      }\r\n    } else {\r\n      if (b == null) {\r\n        str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n         ? toExponential(coeffToString(n.c), e)\r\n         : toFixedPoint(coeffToString(n.c), e, '0');\r\n      } else if (b === 10 && alphabetHasNormalDecimalDigits) {\r\n        n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n        str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n      } else {\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n        str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n      }\r\n\r\n      if (s < 0 && n.c[0]) str = '-' + str;\r\n    }\r\n\r\n    return str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return as toString, but do not accept a base argument, and include the minus sign for\r\n   * negative zero.\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    return valueOf(this);\r\n  };\r\n\r\n\r\n  P._isBigNumber = true;\r\n\r\n  P[Symbol.toStringTag] = 'BigNumber';\r\n\r\n  // Node.js v10.12.0+\r\n  P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n\r\n  if (configObject != null) BigNumber.set(configObject);\r\n\r\n  return BigNumber;\r\n}\r\n\r\n\r\n// PRIVATE HELPER FUNCTIONS\r\n\r\n// These functions don't need access to variables,\r\n// e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\nfunction bitFloor(n) {\r\n  var i = n | 0;\r\n  return n > 0 || n === i ? i : i - 1;\r\n}\r\n\r\n\r\n// Return a coefficient array as a string of base 10 digits.\r\nfunction coeffToString(a) {\r\n  var s, z,\r\n    i = 1,\r\n    j = a.length,\r\n    r = a[0] + '';\r\n\r\n  for (; i < j;) {\r\n    s = a[i++] + '';\r\n    z = LOG_BASE - s.length;\r\n    for (; z--; s = '0' + s);\r\n    r += s;\r\n  }\r\n\r\n  // Determine trailing zeros.\r\n  for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n  return r.slice(0, j + 1 || 1);\r\n}\r\n\r\n\r\n// Compare the value of BigNumbers x and y.\r\nfunction compare(x, y) {\r\n  var a, b,\r\n    xc = x.c,\r\n    yc = y.c,\r\n    i = x.s,\r\n    j = y.s,\r\n    k = x.e,\r\n    l = y.e;\r\n\r\n  // Either NaN?\r\n  if (!i || !j) return null;\r\n\r\n  a = xc && !xc[0];\r\n  b = yc && !yc[0];\r\n\r\n  // Either zero?\r\n  if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n  // Signs differ?\r\n  if (i != j) return i;\r\n\r\n  a = i < 0;\r\n  b = k == l;\r\n\r\n  // Either Infinity?\r\n  if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n  // Compare exponents.\r\n  if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n  j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n  // Compare lengths.\r\n  return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n}\r\n\r\n\r\n/*\r\n * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n */\r\nfunction intCheck(n, min, max, name) {\r\n  if (n < min || n > max || n !== mathfloor(n)) {\r\n    throw Error\r\n     (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n       ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n       : ' not a primitive number: ') + String(n));\r\n  }\r\n}\r\n\r\n\r\n// Assumes finite n.\r\nfunction isOdd(n) {\r\n  var k = n.c.length - 1;\r\n  return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n}\r\n\r\n\r\nfunction toExponential(str, e) {\r\n  return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n   (e < 0 ? 'e' : 'e+') + e;\r\n}\r\n\r\n\r\nfunction toFixedPoint(str, e, z) {\r\n  var len, zs;\r\n\r\n  // Negative exponent?\r\n  if (e < 0) {\r\n\r\n    // Prepend zeros.\r\n    for (zs = z + '.'; ++e; zs += z);\r\n    str = zs + str;\r\n\r\n  // Positive exponent\r\n  } else {\r\n    len = str.length;\r\n\r\n    // Append zeros.\r\n    if (++e > len) {\r\n      for (zs = z, e -= len; --e; zs += z);\r\n      str += zs;\r\n    } else if (e < len) {\r\n      str = str.slice(0, e) + '.' + str.slice(e);\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n\r\n// EXPORT\r\n\r\n\r\nexport var BigNumber = clone();\r\n\r\nexport default BigNumber;\r\n","class SplayTreeNode {\r\n    key;\r\n    left = null;\r\n    right = null;\r\n    constructor(key) {\r\n        this.key = key;\r\n    }\r\n}\r\nclass SplayTreeSetNode extends SplayTreeNode {\r\n    constructor(key) {\r\n        super(key);\r\n    }\r\n}\r\nclass SplayTreeMapNode extends SplayTreeNode {\r\n    value;\r\n    constructor(key, value) {\r\n        super(key);\r\n        this.value = value;\r\n    }\r\n    replaceValue(value) {\r\n        const node = new SplayTreeMapNode(this.key, value);\r\n        node.left = this.left;\r\n        node.right = this.right;\r\n        return node;\r\n    }\r\n}\r\nclass SplayTree {\r\n    size = 0;\r\n    modificationCount = 0;\r\n    splayCount = 0;\r\n    splay(key) {\r\n        const root = this.root;\r\n        if (root == null) {\r\n            this.compare(key, key);\r\n            return -1;\r\n        }\r\n        let right = null;\r\n        let newTreeRight = null;\r\n        let left = null;\r\n        let newTreeLeft = null;\r\n        let current = root;\r\n        const compare = this.compare;\r\n        let comp;\r\n        while (true) {\r\n            comp = compare(current.key, key);\r\n            if (comp > 0) {\r\n                let currentLeft = current.left;\r\n                if (currentLeft == null)\r\n                    break;\r\n                comp = compare(currentLeft.key, key);\r\n                if (comp > 0) {\r\n                    current.left = currentLeft.right;\r\n                    currentLeft.right = current;\r\n                    current = currentLeft;\r\n                    currentLeft = current.left;\r\n                    if (currentLeft == null)\r\n                        break;\r\n                }\r\n                if (right == null) {\r\n                    newTreeRight = current;\r\n                }\r\n                else {\r\n                    right.left = current;\r\n                }\r\n                right = current;\r\n                current = currentLeft;\r\n            }\r\n            else if (comp < 0) {\r\n                let currentRight = current.right;\r\n                if (currentRight == null)\r\n                    break;\r\n                comp = compare(currentRight.key, key);\r\n                if (comp < 0) {\r\n                    current.right = currentRight.left;\r\n                    currentRight.left = current;\r\n                    current = currentRight;\r\n                    currentRight = current.right;\r\n                    if (currentRight == null)\r\n                        break;\r\n                }\r\n                if (left == null) {\r\n                    newTreeLeft = current;\r\n                }\r\n                else {\r\n                    left.right = current;\r\n                }\r\n                left = current;\r\n                current = currentRight;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        if (left != null) {\r\n            left.right = current.left;\r\n            current.left = newTreeLeft;\r\n        }\r\n        if (right != null) {\r\n            right.left = current.right;\r\n            current.right = newTreeRight;\r\n        }\r\n        if (this.root !== current) {\r\n            this.root = current;\r\n            this.splayCount++;\r\n        }\r\n        return comp;\r\n    }\r\n    splayMin(node) {\r\n        let current = node;\r\n        let nextLeft = current.left;\r\n        while (nextLeft != null) {\r\n            const left = nextLeft;\r\n            current.left = left.right;\r\n            left.right = current;\r\n            current = left;\r\n            nextLeft = current.left;\r\n        }\r\n        return current;\r\n    }\r\n    splayMax(node) {\r\n        let current = node;\r\n        let nextRight = current.right;\r\n        while (nextRight != null) {\r\n            const right = nextRight;\r\n            current.right = right.left;\r\n            right.left = current;\r\n            current = right;\r\n            nextRight = current.right;\r\n        }\r\n        return current;\r\n    }\r\n    _delete(key) {\r\n        if (this.root == null)\r\n            return null;\r\n        const comp = this.splay(key);\r\n        if (comp != 0)\r\n            return null;\r\n        let root = this.root;\r\n        const result = root;\r\n        const left = root.left;\r\n        this.size--;\r\n        if (left == null) {\r\n            this.root = root.right;\r\n        }\r\n        else {\r\n            const right = root.right;\r\n            root = this.splayMax(left);\r\n            root.right = right;\r\n            this.root = root;\r\n        }\r\n        this.modificationCount++;\r\n        return result;\r\n    }\r\n    addNewRoot(node, comp) {\r\n        this.size++;\r\n        this.modificationCount++;\r\n        const root = this.root;\r\n        if (root == null) {\r\n            this.root = node;\r\n            return;\r\n        }\r\n        if (comp < 0) {\r\n            node.left = root;\r\n            node.right = root.right;\r\n            root.right = null;\r\n        }\r\n        else {\r\n            node.right = root;\r\n            node.left = root.left;\r\n            root.left = null;\r\n        }\r\n        this.root = node;\r\n    }\r\n    _first() {\r\n        const root = this.root;\r\n        if (root == null)\r\n            return null;\r\n        this.root = this.splayMin(root);\r\n        return this.root;\r\n    }\r\n    _last() {\r\n        const root = this.root;\r\n        if (root == null)\r\n            return null;\r\n        this.root = this.splayMax(root);\r\n        return this.root;\r\n    }\r\n    clear() {\r\n        this.root = null;\r\n        this.size = 0;\r\n        this.modificationCount++;\r\n    }\r\n    has(key) {\r\n        return this.validKey(key) && this.splay(key) == 0;\r\n    }\r\n    defaultCompare() {\r\n        return (a, b) => a < b ? -1 : a > b ? 1 : 0;\r\n    }\r\n    wrap() {\r\n        return {\r\n            getRoot: () => { return this.root; },\r\n            setRoot: (root) => { this.root = root; },\r\n            getSize: () => { return this.size; },\r\n            getModificationCount: () => { return this.modificationCount; },\r\n            getSplayCount: () => { return this.splayCount; },\r\n            setSplayCount: (count) => { this.splayCount = count; },\r\n            splay: (key) => { return this.splay(key); },\r\n            has: (key) => { return this.has(key); },\r\n        };\r\n    }\r\n}\r\nexport class SplayTreeMap extends SplayTree {\r\n    root = null;\r\n    compare;\r\n    validKey;\r\n    constructor(compare, isValidKey) {\r\n        super();\r\n        this.compare = compare ?? this.defaultCompare();\r\n        this.validKey = isValidKey ?? ((a) => a != null && a != undefined);\r\n    }\r\n    delete(key) {\r\n        if (!this.validKey(key))\r\n            return false;\r\n        return this._delete(key) != null;\r\n    }\r\n    forEach(f) {\r\n        const nodes = new SplayTreeMapEntryIterableIterator(this.wrap());\r\n        let result;\r\n        while (result = nodes.next(), !result.done) {\r\n            f(result.value[1], result.value[0], this);\r\n        }\r\n    }\r\n    get(key) {\r\n        if (!this.validKey(key))\r\n            return undefined;\r\n        if (this.root != null) {\r\n            const comp = this.splay(key);\r\n            if (comp == 0) {\r\n                return this.root.value;\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n    hasValue(value) {\r\n        const initialSplayCount = this.splayCount;\r\n        const visit = (node) => {\r\n            while (node != null) {\r\n                if (node.value == value)\r\n                    return true;\r\n                if (initialSplayCount != this.splayCount) {\r\n                    throw \"Concurrent modification during iteration.\";\r\n                }\r\n                if (node.right != null && visit(node.right)) {\r\n                    return true;\r\n                }\r\n                node = node.left;\r\n            }\r\n            return false;\r\n        };\r\n        return visit(this.root);\r\n    }\r\n    set(key, value) {\r\n        const comp = this.splay(key);\r\n        if (comp == 0) {\r\n            this.root = this.root.replaceValue(value);\r\n            this.splayCount += 1;\r\n            return this;\r\n        }\r\n        this.addNewRoot(new SplayTreeMapNode(key, value), comp);\r\n        return this;\r\n    }\r\n    setAll(other) {\r\n        other.forEach((value, key) => {\r\n            this.set(key, value);\r\n        });\r\n    }\r\n    setIfAbsent(key, ifAbsent) {\r\n        let comp = this.splay(key);\r\n        if (comp == 0) {\r\n            return this.root.value;\r\n        }\r\n        const modificationCount = this.modificationCount;\r\n        const splayCount = this.splayCount;\r\n        const value = ifAbsent();\r\n        if (modificationCount != this.modificationCount) {\r\n            throw \"Concurrent modification during iteration.\";\r\n        }\r\n        if (splayCount != this.splayCount) {\r\n            comp = this.splay(key);\r\n        }\r\n        this.addNewRoot(new SplayTreeMapNode(key, value), comp);\r\n        return value;\r\n    }\r\n    isEmpty() {\r\n        return this.root == null;\r\n    }\r\n    isNotEmpty() {\r\n        return !this.isEmpty();\r\n    }\r\n    firstKey() {\r\n        if (this.root == null)\r\n            return null;\r\n        return this._first().key;\r\n    }\r\n    lastKey() {\r\n        if (this.root == null)\r\n            return null;\r\n        return this._last().key;\r\n    }\r\n    lastKeyBefore(key) {\r\n        if (key == null)\r\n            throw \"Invalid arguments(s)\";\r\n        if (this.root == null)\r\n            return null;\r\n        const comp = this.splay(key);\r\n        if (comp < 0)\r\n            return this.root.key;\r\n        let node = this.root.left;\r\n        if (node == null)\r\n            return null;\r\n        let nodeRight = node.right;\r\n        while (nodeRight != null) {\r\n            node = nodeRight;\r\n            nodeRight = node.right;\r\n        }\r\n        return node.key;\r\n    }\r\n    firstKeyAfter(key) {\r\n        if (key == null)\r\n            throw \"Invalid arguments(s)\";\r\n        if (this.root == null)\r\n            return null;\r\n        const comp = this.splay(key);\r\n        if (comp > 0)\r\n            return this.root.key;\r\n        let node = this.root.right;\r\n        if (node == null)\r\n            return null;\r\n        let nodeLeft = node.left;\r\n        while (nodeLeft != null) {\r\n            node = nodeLeft;\r\n            nodeLeft = node.left;\r\n        }\r\n        return node.key;\r\n    }\r\n    update(key, update, ifAbsent) {\r\n        let comp = this.splay(key);\r\n        if (comp == 0) {\r\n            const modificationCount = this.modificationCount;\r\n            const splayCount = this.splayCount;\r\n            const newValue = update(this.root.value);\r\n            if (modificationCount != this.modificationCount) {\r\n                throw \"Concurrent modification during iteration.\";\r\n            }\r\n            if (splayCount != this.splayCount) {\r\n                this.splay(key);\r\n            }\r\n            this.root = this.root.replaceValue(newValue);\r\n            this.splayCount += 1;\r\n            return newValue;\r\n        }\r\n        if (ifAbsent != null) {\r\n            const modificationCount = this.modificationCount;\r\n            const splayCount = this.splayCount;\r\n            const newValue = ifAbsent();\r\n            if (modificationCount != this.modificationCount) {\r\n                throw \"Concurrent modification during iteration.\";\r\n            }\r\n            if (splayCount != this.splayCount) {\r\n                comp = this.splay(key);\r\n            }\r\n            this.addNewRoot(new SplayTreeMapNode(key, newValue), comp);\r\n            return newValue;\r\n        }\r\n        throw \"Invalid argument (key): Key not in map.\";\r\n    }\r\n    updateAll(update) {\r\n        const root = this.root;\r\n        if (root == null)\r\n            return;\r\n        const iterator = new SplayTreeMapEntryIterableIterator(this.wrap());\r\n        let node;\r\n        while (node = iterator.next(), !node.done) {\r\n            const newValue = update(...node.value);\r\n            iterator.replaceValue(newValue);\r\n        }\r\n    }\r\n    keys() {\r\n        return new SplayTreeKeyIterableIterator(this.wrap());\r\n    }\r\n    values() {\r\n        return new SplayTreeValueIterableIterator(this.wrap());\r\n    }\r\n    entries() {\r\n        return this[Symbol.iterator]();\r\n    }\r\n    [Symbol.iterator]() {\r\n        return new SplayTreeMapEntryIterableIterator(this.wrap());\r\n    }\r\n    [Symbol.toStringTag] = '[object Map]';\r\n}\r\nexport class SplayTreeSet extends SplayTree {\r\n    root = null;\r\n    compare;\r\n    validKey;\r\n    constructor(compare, isValidKey) {\r\n        super();\r\n        this.compare = compare ?? this.defaultCompare();\r\n        this.validKey = isValidKey ?? ((v) => v != null && v != undefined);\r\n    }\r\n    delete(element) {\r\n        if (!this.validKey(element))\r\n            return false;\r\n        return this._delete(element) != null;\r\n    }\r\n    deleteAll(elements) {\r\n        for (const element of elements) {\r\n            this.delete(element);\r\n        }\r\n    }\r\n    forEach(f) {\r\n        const nodes = this[Symbol.iterator]();\r\n        let result;\r\n        while (result = nodes.next(), !result.done) {\r\n            f(result.value, result.value, this);\r\n        }\r\n    }\r\n    add(element) {\r\n        const compare = this.splay(element);\r\n        if (compare != 0)\r\n            this.addNewRoot(new SplayTreeSetNode(element), compare);\r\n        return this;\r\n    }\r\n    addAndReturn(element) {\r\n        const compare = this.splay(element);\r\n        if (compare != 0)\r\n            this.addNewRoot(new SplayTreeSetNode(element), compare);\r\n        return this.root.key;\r\n    }\r\n    addAll(elements) {\r\n        for (const element of elements) {\r\n            this.add(element);\r\n        }\r\n    }\r\n    isEmpty() {\r\n        return this.root == null;\r\n    }\r\n    isNotEmpty() {\r\n        return this.root != null;\r\n    }\r\n    single() {\r\n        if (this.size == 0)\r\n            throw \"Bad state: No element\";\r\n        if (this.size > 1)\r\n            throw \"Bad state: Too many element\";\r\n        return this.root.key;\r\n    }\r\n    first() {\r\n        if (this.size == 0)\r\n            throw \"Bad state: No element\";\r\n        return this._first().key;\r\n    }\r\n    last() {\r\n        if (this.size == 0)\r\n            throw \"Bad state: No element\";\r\n        return this._last().key;\r\n    }\r\n    lastBefore(element) {\r\n        if (element == null)\r\n            throw \"Invalid arguments(s)\";\r\n        if (this.root == null)\r\n            return null;\r\n        const comp = this.splay(element);\r\n        if (comp < 0)\r\n            return this.root.key;\r\n        let node = this.root.left;\r\n        if (node == null)\r\n            return null;\r\n        let nodeRight = node.right;\r\n        while (nodeRight != null) {\r\n            node = nodeRight;\r\n            nodeRight = node.right;\r\n        }\r\n        return node.key;\r\n    }\r\n    firstAfter(element) {\r\n        if (element == null)\r\n            throw \"Invalid arguments(s)\";\r\n        if (this.root == null)\r\n            return null;\r\n        const comp = this.splay(element);\r\n        if (comp > 0)\r\n            return this.root.key;\r\n        let node = this.root.right;\r\n        if (node == null)\r\n            return null;\r\n        let nodeLeft = node.left;\r\n        while (nodeLeft != null) {\r\n            node = nodeLeft;\r\n            nodeLeft = node.left;\r\n        }\r\n        return node.key;\r\n    }\r\n    retainAll(elements) {\r\n        const retainSet = new SplayTreeSet(this.compare, this.validKey);\r\n        const modificationCount = this.modificationCount;\r\n        for (const object of elements) {\r\n            if (modificationCount != this.modificationCount) {\r\n                throw \"Concurrent modification during iteration.\";\r\n            }\r\n            if (this.validKey(object) && this.splay(object) == 0) {\r\n                retainSet.add(this.root.key);\r\n            }\r\n        }\r\n        if (retainSet.size != this.size) {\r\n            this.root = retainSet.root;\r\n            this.size = retainSet.size;\r\n            this.modificationCount++;\r\n        }\r\n    }\r\n    lookup(object) {\r\n        if (!this.validKey(object))\r\n            return null;\r\n        const comp = this.splay(object);\r\n        if (comp != 0)\r\n            return null;\r\n        return this.root.key;\r\n    }\r\n    intersection(other) {\r\n        const result = new SplayTreeSet(this.compare, this.validKey);\r\n        for (const element of this) {\r\n            if (other.has(element))\r\n                result.add(element);\r\n        }\r\n        return result;\r\n    }\r\n    difference(other) {\r\n        const result = new SplayTreeSet(this.compare, this.validKey);\r\n        for (const element of this) {\r\n            if (!other.has(element))\r\n                result.add(element);\r\n        }\r\n        return result;\r\n    }\r\n    union(other) {\r\n        const u = this.clone();\r\n        u.addAll(other);\r\n        return u;\r\n    }\r\n    clone() {\r\n        const set = new SplayTreeSet(this.compare, this.validKey);\r\n        set.size = this.size;\r\n        set.root = this.copyNode(this.root);\r\n        return set;\r\n    }\r\n    copyNode(node) {\r\n        if (node == null)\r\n            return null;\r\n        function copyChildren(node, dest) {\r\n            let left;\r\n            let right;\r\n            do {\r\n                left = node.left;\r\n                right = node.right;\r\n                if (left != null) {\r\n                    const newLeft = new SplayTreeSetNode(left.key);\r\n                    dest.left = newLeft;\r\n                    copyChildren(left, newLeft);\r\n                }\r\n                if (right != null) {\r\n                    const newRight = new SplayTreeSetNode(right.key);\r\n                    dest.right = newRight;\r\n                    node = right;\r\n                    dest = newRight;\r\n                }\r\n            } while (right != null);\r\n        }\r\n        const result = new SplayTreeSetNode(node.key);\r\n        copyChildren(node, result);\r\n        return result;\r\n    }\r\n    toSet() {\r\n        return this.clone();\r\n    }\r\n    entries() {\r\n        return new SplayTreeSetEntryIterableIterator(this.wrap());\r\n    }\r\n    keys() {\r\n        return this[Symbol.iterator]();\r\n    }\r\n    values() {\r\n        return this[Symbol.iterator]();\r\n    }\r\n    [Symbol.iterator]() {\r\n        return new SplayTreeKeyIterableIterator(this.wrap());\r\n    }\r\n    [Symbol.toStringTag] = '[object Set]';\r\n}\r\nclass SplayTreeIterableIterator {\r\n    tree;\r\n    path = new Array();\r\n    modificationCount = null;\r\n    splayCount;\r\n    constructor(tree) {\r\n        this.tree = tree;\r\n        this.splayCount = tree.getSplayCount();\r\n    }\r\n    [Symbol.iterator]() {\r\n        return this;\r\n    }\r\n    next() {\r\n        if (this.moveNext())\r\n            return { done: false, value: this.current() };\r\n        return { done: true, value: null };\r\n    }\r\n    current() {\r\n        if (!this.path.length)\r\n            return null;\r\n        const node = this.path[this.path.length - 1];\r\n        return this.getValue(node);\r\n    }\r\n    rebuildPath(key) {\r\n        this.path.splice(0, this.path.length);\r\n        this.tree.splay(key);\r\n        this.path.push(this.tree.getRoot());\r\n        this.splayCount = this.tree.getSplayCount();\r\n    }\r\n    findLeftMostDescendent(node) {\r\n        while (node != null) {\r\n            this.path.push(node);\r\n            node = node.left;\r\n        }\r\n    }\r\n    moveNext() {\r\n        if (this.modificationCount != this.tree.getModificationCount()) {\r\n            if (this.modificationCount == null) {\r\n                this.modificationCount = this.tree.getModificationCount();\r\n                let node = this.tree.getRoot();\r\n                while (node != null) {\r\n                    this.path.push(node);\r\n                    node = node.left;\r\n                }\r\n                return this.path.length > 0;\r\n            }\r\n            throw \"Concurrent modification during iteration.\";\r\n        }\r\n        if (!this.path.length)\r\n            return false;\r\n        if (this.splayCount != this.tree.getSplayCount()) {\r\n            this.rebuildPath(this.path[this.path.length - 1].key);\r\n        }\r\n        let node = this.path[this.path.length - 1];\r\n        let next = node.right;\r\n        if (next != null) {\r\n            while (next != null) {\r\n                this.path.push(next);\r\n                next = next.left;\r\n            }\r\n            return true;\r\n        }\r\n        this.path.pop();\r\n        while (this.path.length && this.path[this.path.length - 1].right === node) {\r\n            node = this.path.pop();\r\n        }\r\n        return this.path.length > 0;\r\n    }\r\n}\r\nclass SplayTreeKeyIterableIterator extends SplayTreeIterableIterator {\r\n    getValue(node) {\r\n        return node.key;\r\n    }\r\n}\r\nclass SplayTreeSetEntryIterableIterator extends SplayTreeIterableIterator {\r\n    getValue(node) {\r\n        return [node.key, node.key];\r\n    }\r\n}\r\nclass SplayTreeValueIterableIterator extends SplayTreeIterableIterator {\r\n    constructor(map) {\r\n        super(map);\r\n    }\r\n    getValue(node) {\r\n        return node.value;\r\n    }\r\n}\r\nclass SplayTreeMapEntryIterableIterator extends SplayTreeIterableIterator {\r\n    constructor(map) {\r\n        super(map);\r\n    }\r\n    getValue(node) {\r\n        return [node.key, node.value];\r\n    }\r\n    replaceValue(value) {\r\n        if (this.modificationCount != this.tree.getModificationCount()) {\r\n            throw \"Concurrent modification during iteration.\";\r\n        }\r\n        if (this.splayCount != this.tree.getSplayCount()) {\r\n            this.rebuildPath(this.path[this.path.length - 1].key);\r\n        }\r\n        const last = this.path.pop();\r\n        const newLast = last.replaceValue(value);\r\n        if (!this.path.length) {\r\n            this.tree.setRoot(newLast);\r\n        }\r\n        else {\r\n            const parent = this.path[this.path.length - 1];\r\n            if (last === parent.left) {\r\n                parent.left = newLast;\r\n            }\r\n            else {\r\n                parent.right = newLast;\r\n            }\r\n        }\r\n        this.path.push(newLast);\r\n        const count = this.tree.getSplayCount() + 1;\r\n        this.tree.setSplayCount(count);\r\n        this.splayCount = count;\r\n    }\r\n}\r\n","export default (x) => {\n    return x;\n};\n","import BigNumber from \"bignumber.js\";\nimport { SplayTreeSet } from \"splaytree-ts\";\nimport compare from \"./compare.js\";\nimport identity from \"./identity.js\";\nexport default (eps) => {\n    if (eps) {\n        const xTree = new SplayTreeSet(compare(eps));\n        const yTree = new SplayTreeSet(compare(eps));\n        const snapCoord = (coord, tree) => {\n            return tree.addAndReturn(coord);\n        };\n        const snap = (v) => {\n            return {\n                x: snapCoord(v.x, xTree),\n                y: snapCoord(v.y, yTree),\n            };\n        };\n        snap({ x: new BigNumber(0), y: new BigNumber(0) });\n        return snap;\n    }\n    return identity;\n};\n","import compare from \"./compare.js\";\nimport orient from \"./orient.js\";\nimport snap from \"./snap.js\";\nconst set = (eps) => {\n    return {\n        set: (eps) => { precision = set(eps); },\n        reset: () => set(eps),\n        compare: compare(eps),\n        snap: snap(eps),\n        orient: orient(eps)\n    };\n};\nexport let precision = set();\n","/**\n * A bounding box has the format:\n *\n *  { ll: { x: xmin, y: ymin }, ur: { x: xmax, y: ymax } }\n *\n */\nexport const isInBbox = (bbox, point) => {\n    return (bbox.ll.x.isLessThanOrEqualTo(point.x) &&\n        point.x.isLessThanOrEqualTo(bbox.ur.x) &&\n        bbox.ll.y.isLessThanOrEqualTo(point.y) &&\n        point.y.isLessThanOrEqualTo(bbox.ur.y));\n};\n/* Returns either null, or a bbox (aka an ordered pair of points)\n * If there is only one point of overlap, a bbox with identical points\n * will be returned */\nexport const getBboxOverlap = (b1, b2) => {\n    // check if the bboxes overlap at all\n    if (b2.ur.x.isLessThan(b1.ll.x) ||\n        b1.ur.x.isLessThan(b2.ll.x) ||\n        b2.ur.y.isLessThan(b1.ll.y) ||\n        b1.ur.y.isLessThan(b2.ll.y))\n        return null;\n    // find the middle two X values\n    const lowerX = b1.ll.x.isLessThan(b2.ll.x) ? b2.ll.x : b1.ll.x;\n    const upperX = b1.ur.x.isLessThan(b2.ur.x) ? b1.ur.x : b2.ur.x;\n    // find the middle two Y values\n    const lowerY = b1.ll.y.isLessThan(b2.ll.y) ? b2.ll.y : b1.ll.y;\n    const upperY = b1.ur.y.isLessThan(b2.ur.y) ? b1.ur.y : b2.ur.y;\n    // put those middle values together to get the overlap\n    return { ll: { x: lowerX, y: lowerY }, ur: { x: upperX, y: upperY } };\n};\n","/* Cross Product of two vectors with first point at origin */\nexport const crossProduct = (a, b) => a.x.times(b.y).minus(a.y.times(b.x));\n/* Dot Product of two vectors with first point at origin */\nexport const dotProduct = (a, b) => a.x.times(b.x).plus(a.y.times(b.y));\nexport const length = (v) => dotProduct(v, v).sqrt();\n/* Get the sine of the angle from pShared -> pAngle to pShaed -> pBase */\nexport const sineOfAngle = (pShared, pBase, pAngle) => {\n    const vBase = { x: pBase.x.minus(pShared.x), y: pBase.y.minus(pShared.y) };\n    const vAngle = { x: pAngle.x.minus(pShared.x), y: pAngle.y.minus(pShared.y) };\n    return crossProduct(vAngle, vBase).div(length(vAngle)).div(length(vBase));\n};\n/* Get the cosine of the angle from pShared -> pAngle to pShaed -> pBase */\nexport const cosineOfAngle = (pShared, pBase, pAngle) => {\n    const vBase = { x: pBase.x.minus(pShared.x), y: pBase.y.minus(pShared.y) };\n    const vAngle = { x: pAngle.x.minus(pShared.x), y: pAngle.y.minus(pShared.y) };\n    return dotProduct(vAngle, vBase).div(length(vAngle)).div(length(vBase));\n};\n/* Get the x coordinate where the given line (defined by a point and vector)\n * crosses the horizontal line with the given y coordiante.\n * In the case of parrallel lines (including overlapping ones) returns null. */\nexport const horizontalIntersection = (pt, v, y) => {\n    if (v.y.isZero())\n        return null;\n    return { x: pt.x.plus((v.x.div(v.y)).times(y.minus(pt.y))), y: y };\n};\n/* Get the y coordinate where the given line (defined by a point and vector)\n * crosses the vertical line with the given x coordiante.\n * In the case of parrallel lines (including overlapping ones) returns null. */\nexport const verticalIntersection = (pt, v, x) => {\n    if (v.x.isZero())\n        return null;\n    return { x: x, y: pt.y.plus((v.y.div(v.x)).times(x.minus(pt.x))) };\n};\n/* Get the intersection of two lines, each defined by a base point and a vector.\n * In the case of parrallel lines (including overlapping ones) returns null. */\nexport const intersection = (pt1, v1, pt2, v2) => {\n    // take some shortcuts for vertical and horizontal lines\n    // this also ensures we don't calculate an intersection and then discover\n    // it's actually outside the bounding box of the line\n    if (v1.x.isZero())\n        return verticalIntersection(pt2, v2, pt1.x);\n    if (v2.x.isZero())\n        return verticalIntersection(pt1, v1, pt2.x);\n    if (v1.y.isZero())\n        return horizontalIntersection(pt2, v2, pt1.y);\n    if (v2.y.isZero())\n        return horizontalIntersection(pt1, v1, pt2.y);\n    // General case for non-overlapping segments.\n    // This algorithm is based on Schneider and Eberly.\n    // http://www.cimec.org.ar/~ncalvo/Schneider_Eberly.pdf - pg 244\n    const kross = crossProduct(v1, v2);\n    if (kross.isZero())\n        return null;\n    const ve = { x: pt2.x.minus(pt1.x), y: pt2.y.minus(pt1.y) };\n    const d1 = crossProduct(ve, v1).div(kross);\n    const d2 = crossProduct(ve, v2).div(kross);\n    // take the average of the two calculations to minimize rounding error\n    const x1 = pt1.x.plus(d2.times(v1.x)), x2 = pt2.x.plus(d1.times(v2.x));\n    const y1 = pt1.y.plus(d2.times(v1.y)), y2 = pt2.y.plus(d1.times(v2.y));\n    const x = x1.plus(x2).div(2);\n    const y = y1.plus(y2).div(2);\n    return { x: x, y: y };\n};\n/* Given a vector, return one that is perpendicular */\nexport const perpendicular = (v) => {\n    return { x: v.y.negated(), y: v.x };\n};\n","import Segment from \"./segment.js\";\nimport { cosineOfAngle, sineOfAngle } from \"./vector.js\";\nexport default class SweepEvent {\n    point;\n    isLeft;\n    segment;\n    otherSE;\n    consumedBy;\n    // for ordering sweep events in the sweep event queue\n    static compare(a, b) {\n        // favor event with a point that the sweep line hits first\n        const ptCmp = SweepEvent.comparePoints(a.point, b.point);\n        if (ptCmp !== 0)\n            return ptCmp;\n        // the points are the same, so link them if needed\n        if (a.point !== b.point)\n            a.link(b);\n        // favor right events over left\n        if (a.isLeft !== b.isLeft)\n            return a.isLeft ? 1 : -1;\n        // we have two matching left or right endpoints\n        // ordering of this case is the same as for their segments\n        return Segment.compare(a.segment, b.segment);\n    }\n    // for ordering points in sweep line order\n    static comparePoints(aPt, bPt) {\n        if (aPt.x.isLessThan(bPt.x))\n            return -1;\n        if (aPt.x.isGreaterThan(bPt.x))\n            return 1;\n        if (aPt.y.isLessThan(bPt.y))\n            return -1;\n        if (aPt.y.isGreaterThan(bPt.y))\n            return 1;\n        return 0;\n    }\n    // Warning: 'point' input will be modified and re-used (for performance)\n    constructor(point, isLeft) {\n        if (point.events === undefined)\n            point.events = [this];\n        else\n            point.events.push(this);\n        this.point = point;\n        this.isLeft = isLeft;\n        // this.segment, this.otherSE set by factory\n    }\n    link(other) {\n        if (other.point === this.point) {\n            throw new Error(\"Tried to link already linked events\");\n        }\n        const otherEvents = other.point.events;\n        for (let i = 0, iMax = otherEvents.length; i < iMax; i++) {\n            const evt = otherEvents[i];\n            this.point.events.push(evt);\n            evt.point = this.point;\n        }\n        this.checkForConsuming();\n    }\n    /* Do a pass over our linked events and check to see if any pair\n     * of segments match, and should be consumed. */\n    checkForConsuming() {\n        // FIXME: The loops in this method run O(n^2) => no good.\n        //        Maintain little ordered sweep event trees?\n        //        Can we maintaining an ordering that avoids the need\n        //        for the re-sorting with getLeftmostComparator in geom-out?\n        // Compare each pair of events to see if other events also match\n        const numEvents = this.point.events.length;\n        for (let i = 0; i < numEvents; i++) {\n            const evt1 = this.point.events[i];\n            if (evt1.segment.consumedBy !== undefined)\n                continue;\n            for (let j = i + 1; j < numEvents; j++) {\n                const evt2 = this.point.events[j];\n                if (evt2.consumedBy !== undefined)\n                    continue;\n                if (evt1.otherSE.point.events !== evt2.otherSE.point.events)\n                    continue;\n                evt1.segment.consume(evt2.segment);\n            }\n        }\n    }\n    getAvailableLinkedEvents() {\n        // point.events is always of length 2 or greater\n        const events = [];\n        for (let i = 0, iMax = this.point.events.length; i < iMax; i++) {\n            const evt = this.point.events[i];\n            if (evt !== this && !evt.segment.ringOut && evt.segment.isInResult()) {\n                events.push(evt);\n            }\n        }\n        return events;\n    }\n    /**\n     * Returns a comparator function for sorting linked events that will\n     * favor the event that will give us the smallest left-side angle.\n     * All ring construction starts as low as possible heading to the right,\n     * so by always turning left as sharp as possible we'll get polygons\n     * without uncessary loops & holes.\n     *\n     * The comparator function has a compute cache such that it avoids\n     * re-computing already-computed values.\n     */\n    getLeftmostComparator(baseEvent) {\n        const cache = new Map();\n        const fillCache = (linkedEvent) => {\n            const nextEvent = linkedEvent.otherSE;\n            cache.set(linkedEvent, {\n                sine: sineOfAngle(this.point, baseEvent.point, nextEvent.point),\n                cosine: cosineOfAngle(this.point, baseEvent.point, nextEvent.point),\n            });\n        };\n        return (a, b) => {\n            if (!cache.has(a))\n                fillCache(a);\n            if (!cache.has(b))\n                fillCache(b);\n            const { sine: asine, cosine: acosine } = cache.get(a);\n            const { sine: bsine, cosine: bcosine } = cache.get(b);\n            // both on or above x-axis\n            if (asine.isGreaterThanOrEqualTo(0) && bsine.isGreaterThanOrEqualTo(0)) {\n                if (acosine.isLessThan(bcosine))\n                    return 1;\n                if (acosine.isGreaterThan(bcosine))\n                    return -1;\n                return 0;\n            }\n            // both below x-axis\n            if (asine.isLessThan(0) && bsine.isLessThan(0)) {\n                if (acosine.isLessThan(bcosine))\n                    return -1;\n                if (acosine.isGreaterThan(bcosine))\n                    return 1;\n                return 0;\n            }\n            // one above x-axis, one below\n            if (bsine.isLessThan(asine))\n                return -1;\n            if (bsine.isGreaterThan(asine))\n                return 1;\n            return 0;\n        };\n    }\n}\n","import { getBboxOverlap, isInBbox } from \"./bbox.js\";\nimport operation from \"./operation.js\";\nimport { precision } from \"./precision.js\";\nimport SweepEvent from \"./sweep-event.js\";\nimport { intersection } from \"./vector.js\";\n// Give segments unique ID's to get consistent sorting of\n// segments and sweep events when all else is identical\nlet segmentId = 0;\nexport default class Segment {\n    id;\n    leftSE;\n    rightSE;\n    rings;\n    windings;\n    ringOut;\n    consumedBy;\n    prev;\n    _prevInResult;\n    _beforeState;\n    _afterState;\n    _isInResult;\n    /* This compare() function is for ordering segments in the sweep\n     * line tree, and does so according to the following criteria:\n     *\n     * Consider the vertical line that lies an infinestimal step to the\n     * right of the right-more of the two left endpoints of the input\n     * segments. Imagine slowly moving a point up from negative infinity\n     * in the increasing y direction. Which of the two segments will that\n     * point intersect first? That segment comes 'before' the other one.\n     *\n     * If neither segment would be intersected by such a line, (if one\n     * or more of the segments are vertical) then the line to be considered\n     * is directly on the right-more of the two left inputs.\n     */\n    static compare(a, b) {\n        const alx = a.leftSE.point.x;\n        const blx = b.leftSE.point.x;\n        const arx = a.rightSE.point.x;\n        const brx = b.rightSE.point.x;\n        // check if they're even in the same vertical plane\n        if (brx.isLessThan(alx))\n            return 1;\n        if (arx.isLessThan(blx))\n            return -1;\n        const aly = a.leftSE.point.y;\n        const bly = b.leftSE.point.y;\n        const ary = a.rightSE.point.y;\n        const bry = b.rightSE.point.y;\n        // is left endpoint of segment B the right-more?\n        if (alx.isLessThan(blx)) {\n            // are the two segments in the same horizontal plane?\n            if (bly.isLessThan(aly) && bly.isLessThan(ary))\n                return 1;\n            if (bly.isGreaterThan(aly) && bly.isGreaterThan(ary))\n                return -1;\n            // is the B left endpoint colinear to segment A?\n            const aCmpBLeft = a.comparePoint(b.leftSE.point);\n            if (aCmpBLeft < 0)\n                return 1;\n            if (aCmpBLeft > 0)\n                return -1;\n            // is the A right endpoint colinear to segment B ?\n            const bCmpARight = b.comparePoint(a.rightSE.point);\n            if (bCmpARight !== 0)\n                return bCmpARight;\n            // colinear segments, consider the one with left-more\n            // left endpoint to be first (arbitrary?)\n            return -1;\n        }\n        // is left endpoint of segment A the right-more?\n        if (alx.isGreaterThan(blx)) {\n            if (aly.isLessThan(bly) && aly.isLessThan(bry))\n                return -1;\n            if (aly.isGreaterThan(bly) && aly.isGreaterThan(bry))\n                return 1;\n            // is the A left endpoint colinear to segment B?\n            const bCmpALeft = b.comparePoint(a.leftSE.point);\n            if (bCmpALeft !== 0)\n                return bCmpALeft;\n            // is the B right endpoint colinear to segment A?\n            const aCmpBRight = a.comparePoint(b.rightSE.point);\n            if (aCmpBRight < 0)\n                return 1;\n            if (aCmpBRight > 0)\n                return -1;\n            // colinear segments, consider the one with left-more\n            // left endpoint to be first (arbitrary?)\n            return 1;\n        }\n        // if we get here, the two left endpoints are in the same\n        // vertical plane, ie alx === blx\n        // consider the lower left-endpoint to come first\n        if (aly.isLessThan(bly))\n            return -1;\n        if (aly.isGreaterThan(bly))\n            return 1;\n        // left endpoints are identical\n        // check for colinearity by using the left-more right endpoint\n        // is the A right endpoint more left-more?\n        if (arx.isLessThan(brx)) {\n            const bCmpARight = b.comparePoint(a.rightSE.point);\n            if (bCmpARight !== 0)\n                return bCmpARight;\n        }\n        // is the B right endpoint more left-more?\n        if (arx.isGreaterThan(brx)) {\n            const aCmpBRight = a.comparePoint(b.rightSE.point);\n            if (aCmpBRight < 0)\n                return 1;\n            if (aCmpBRight > 0)\n                return -1;\n        }\n        if (!arx.eq(brx)) {\n            // are these two [almost] vertical segments with opposite orientation?\n            // if so, the one with the lower right endpoint comes first\n            const ay = ary.minus(aly);\n            const ax = arx.minus(alx);\n            const by = bry.minus(bly);\n            const bx = brx.minus(blx);\n            if (ay.isGreaterThan(ax) && by.isLessThan(bx))\n                return 1;\n            if (ay.isLessThan(ax) && by.isGreaterThan(bx))\n                return -1;\n        }\n        // we have colinear segments with matching orientation\n        // consider the one with more left-more right endpoint to be first\n        if (arx.isGreaterThan(brx))\n            return 1;\n        if (arx.isLessThan(brx))\n            return -1;\n        // if we get here, two two right endpoints are in the same\n        // vertical plane, ie arx === brx\n        // consider the lower right-endpoint to come first\n        if (ary.isLessThan(bry))\n            return -1;\n        if (ary.isGreaterThan(bry))\n            return 1;\n        // right endpoints identical as well, so the segments are idential\n        // fall back on creation order as consistent tie-breaker\n        if (a.id < b.id)\n            return -1;\n        if (a.id > b.id)\n            return 1;\n        // identical segment, ie a === b\n        return 0;\n    }\n    /* Warning: a reference to ringWindings input will be stored,\n     *  and possibly will be later modified */\n    constructor(leftSE, rightSE, rings, windings) {\n        this.id = ++segmentId;\n        this.leftSE = leftSE;\n        leftSE.segment = this;\n        leftSE.otherSE = rightSE;\n        this.rightSE = rightSE;\n        rightSE.segment = this;\n        rightSE.otherSE = leftSE;\n        this.rings = rings;\n        this.windings = windings;\n        // left unset for performance, set later in algorithm\n        // this.ringOut, this.consumedBy, this.prev\n    }\n    static fromRing(pt1, pt2, ring) {\n        let leftPt, rightPt, winding;\n        // ordering the two points according to sweep line ordering\n        const cmpPts = SweepEvent.comparePoints(pt1, pt2);\n        if (cmpPts < 0) {\n            leftPt = pt1;\n            rightPt = pt2;\n            winding = 1;\n        }\n        else if (cmpPts > 0) {\n            leftPt = pt2;\n            rightPt = pt1;\n            winding = -1;\n        }\n        else\n            throw new Error(`Tried to create degenerate segment at [${pt1.x}, ${pt1.y}]`);\n        const leftSE = new SweepEvent(leftPt, true);\n        const rightSE = new SweepEvent(rightPt, false);\n        return new Segment(leftSE, rightSE, [ring], [winding]);\n    }\n    /* When a segment is split, the rightSE is replaced with a new sweep event */\n    replaceRightSE(newRightSE) {\n        this.rightSE = newRightSE;\n        this.rightSE.segment = this;\n        this.rightSE.otherSE = this.leftSE;\n        this.leftSE.otherSE = this.rightSE;\n    }\n    bbox() {\n        const y1 = this.leftSE.point.y;\n        const y2 = this.rightSE.point.y;\n        return {\n            ll: { x: this.leftSE.point.x, y: y1.isLessThan(y2) ? y1 : y2 },\n            ur: { x: this.rightSE.point.x, y: y1.isGreaterThan(y2) ? y1 : y2 },\n        };\n    }\n    /* A vector from the left point to the right */\n    vector() {\n        return {\n            x: this.rightSE.point.x.minus(this.leftSE.point.x),\n            y: this.rightSE.point.y.minus(this.leftSE.point.y),\n        };\n    }\n    isAnEndpoint(pt) {\n        return ((pt.x.eq(this.leftSE.point.x) && pt.y.eq(this.leftSE.point.y)) ||\n            (pt.x.eq(this.rightSE.point.x) && pt.y.eq(this.rightSE.point.y)));\n    }\n    /* Compare this segment with a point.\n     *\n     * A point P is considered to be colinear to a segment if there\n     * exists a distance D such that if we travel along the segment\n     * from one * endpoint towards the other a distance D, we find\n     * ourselves at point P.\n     *\n     * Return value indicates:\n     *\n     *   1: point lies above the segment (to the left of vertical)\n     *   0: point is colinear to segment\n     *  -1: point lies below the segment (to the right of vertical)\n     */\n    comparePoint(point) {\n        return precision.orient(this.leftSE.point, point, this.rightSE.point);\n    }\n    /**\n     * Given another segment, returns the first non-trivial intersection\n     * between the two segments (in terms of sweep line ordering), if it exists.\n     *\n     * A 'non-trivial' intersection is one that will cause one or both of the\n     * segments to be split(). As such, 'trivial' vs. 'non-trivial' intersection:\n     *\n     *   * endpoint of segA with endpoint of segB --> trivial\n     *   * endpoint of segA with point along segB --> non-trivial\n     *   * endpoint of segB with point along segA --> non-trivial\n     *   * point along segA with point along segB --> non-trivial\n     *\n     * If no non-trivial intersection exists, return null\n     * Else, return null.\n     */\n    getIntersection(other) {\n        // If bboxes don't overlap, there can't be any intersections\n        const tBbox = this.bbox();\n        const oBbox = other.bbox();\n        const bboxOverlap = getBboxOverlap(tBbox, oBbox);\n        if (bboxOverlap === null)\n            return null;\n        // We first check to see if the endpoints can be considered intersections.\n        // This will 'snap' intersections to endpoints if possible, and will\n        // handle cases of colinearity.\n        const tlp = this.leftSE.point;\n        const trp = this.rightSE.point;\n        const olp = other.leftSE.point;\n        const orp = other.rightSE.point;\n        // does each endpoint touch the other segment?\n        // note that we restrict the 'touching' definition to only allow segments\n        // to touch endpoints that lie forward from where we are in the sweep line pass\n        const touchesOtherLSE = isInBbox(tBbox, olp) && this.comparePoint(olp) === 0;\n        const touchesThisLSE = isInBbox(oBbox, tlp) && other.comparePoint(tlp) === 0;\n        const touchesOtherRSE = isInBbox(tBbox, orp) && this.comparePoint(orp) === 0;\n        const touchesThisRSE = isInBbox(oBbox, trp) && other.comparePoint(trp) === 0;\n        // do left endpoints match?\n        if (touchesThisLSE && touchesOtherLSE) {\n            // these two cases are for colinear segments with matching left\n            // endpoints, and one segment being longer than the other\n            if (touchesThisRSE && !touchesOtherRSE)\n                return trp;\n            if (!touchesThisRSE && touchesOtherRSE)\n                return orp;\n            // either the two segments match exactly (two trival intersections)\n            // or just on their left endpoint (one trivial intersection\n            return null;\n        }\n        // does this left endpoint matches (other doesn't)\n        if (touchesThisLSE) {\n            // check for segments that just intersect on opposing endpoints\n            if (touchesOtherRSE) {\n                if (tlp.x.eq(orp.x) && tlp.y.eq(orp.y))\n                    return null;\n            }\n            // t-intersection on left endpoint\n            return tlp;\n        }\n        // does other left endpoint matches (this doesn't)\n        if (touchesOtherLSE) {\n            // check for segments that just intersect on opposing endpoints\n            if (touchesThisRSE) {\n                if (trp.x.eq(olp.x) && trp.y.eq(olp.y))\n                    return null;\n            }\n            // t-intersection on left endpoint\n            return olp;\n        }\n        // trivial intersection on right endpoints\n        if (touchesThisRSE && touchesOtherRSE)\n            return null;\n        // t-intersections on just one right endpoint\n        if (touchesThisRSE)\n            return trp;\n        if (touchesOtherRSE)\n            return orp;\n        // None of our endpoints intersect. Look for a general intersection between\n        // infinite lines laid over the segments\n        const pt = intersection(tlp, this.vector(), olp, other.vector());\n        // are the segments parrallel? Note that if they were colinear with overlap,\n        // they would have an endpoint intersection and that case was already handled above\n        if (pt === null)\n            return null;\n        // is the intersection found between the lines not on the segments?\n        if (!isInBbox(bboxOverlap, pt))\n            return null;\n        // round the the computed point if needed\n        return precision.snap(pt);\n    }\n    /**\n     * Split the given segment into multiple segments on the given points.\n     *  * Each existing segment will retain its leftSE and a new rightSE will be\n     *    generated for it.\n     *  * A new segment will be generated which will adopt the original segment's\n     *    rightSE, and a new leftSE will be generated for it.\n     *  * If there are more than two points given to split on, new segments\n     *    in the middle will be generated with new leftSE and rightSE's.\n     *  * An array of the newly generated SweepEvents will be returned.\n     *\n     * Warning: input array of points is modified\n     */\n    split(point) {\n        const newEvents = [];\n        const alreadyLinked = point.events !== undefined;\n        const newLeftSE = new SweepEvent(point, true);\n        const newRightSE = new SweepEvent(point, false);\n        const oldRightSE = this.rightSE;\n        this.replaceRightSE(newRightSE);\n        newEvents.push(newRightSE);\n        newEvents.push(newLeftSE);\n        const newSeg = new Segment(newLeftSE, oldRightSE, this.rings.slice(), this.windings.slice());\n        // when splitting a nearly vertical downward-facing segment,\n        // sometimes one of the resulting new segments is vertical, in which\n        // case its left and right events may need to be swapped\n        if (SweepEvent.comparePoints(newSeg.leftSE.point, newSeg.rightSE.point) > 0) {\n            newSeg.swapEvents();\n        }\n        if (SweepEvent.comparePoints(this.leftSE.point, this.rightSE.point) > 0) {\n            this.swapEvents();\n        }\n        // in the point we just used to create new sweep events with was already\n        // linked to other events, we need to check if either of the affected\n        // segments should be consumed\n        if (alreadyLinked) {\n            newLeftSE.checkForConsuming();\n            newRightSE.checkForConsuming();\n        }\n        return newEvents;\n    }\n    /* Swap which event is left and right */\n    swapEvents() {\n        const tmpEvt = this.rightSE;\n        this.rightSE = this.leftSE;\n        this.leftSE = tmpEvt;\n        this.leftSE.isLeft = true;\n        this.rightSE.isLeft = false;\n        for (let i = 0, iMax = this.windings.length; i < iMax; i++) {\n            this.windings[i] *= -1;\n        }\n    }\n    /* Consume another segment. We take their rings under our wing\n     * and mark them as consumed. Use for perfectly overlapping segments */\n    consume(other) {\n        let consumer = this;\n        let consumee = other;\n        while (consumer.consumedBy)\n            consumer = consumer.consumedBy;\n        while (consumee.consumedBy)\n            consumee = consumee.consumedBy;\n        const cmp = Segment.compare(consumer, consumee);\n        if (cmp === 0)\n            return; // already consumed\n        // the winner of the consumption is the earlier segment\n        // according to sweep line ordering\n        if (cmp > 0) {\n            const tmp = consumer;\n            consumer = consumee;\n            consumee = tmp;\n        }\n        // make sure a segment doesn't consume it's prev\n        if (consumer.prev === consumee) {\n            const tmp = consumer;\n            consumer = consumee;\n            consumee = tmp;\n        }\n        for (let i = 0, iMax = consumee.rings.length; i < iMax; i++) {\n            const ring = consumee.rings[i];\n            const winding = consumee.windings[i];\n            const index = consumer.rings.indexOf(ring);\n            if (index === -1) {\n                consumer.rings.push(ring);\n                consumer.windings.push(winding);\n            }\n            else\n                consumer.windings[index] += winding;\n        }\n        consumee.rings = null;\n        consumee.windings = null;\n        consumee.consumedBy = consumer;\n        // mark sweep events consumed as to maintain ordering in sweep event queue\n        consumee.leftSE.consumedBy = consumer.leftSE;\n        consumee.rightSE.consumedBy = consumer.rightSE;\n    }\n    /* The first segment previous segment chain that is in the result */\n    prevInResult() {\n        if (this._prevInResult !== undefined)\n            return this._prevInResult;\n        if (!this.prev)\n            this._prevInResult = null;\n        else if (this.prev.isInResult())\n            this._prevInResult = this.prev;\n        else\n            this._prevInResult = this.prev.prevInResult();\n        return this._prevInResult;\n    }\n    beforeState() {\n        if (this._beforeState !== undefined)\n            return this._beforeState;\n        if (!this.prev)\n            this._beforeState = {\n                rings: [],\n                windings: [],\n                multiPolys: [],\n            };\n        else {\n            const seg = this.prev.consumedBy || this.prev;\n            this._beforeState = seg.afterState();\n        }\n        return this._beforeState;\n    }\n    afterState() {\n        if (this._afterState !== undefined)\n            return this._afterState;\n        const beforeState = this.beforeState();\n        this._afterState = {\n            rings: beforeState.rings.slice(0),\n            windings: beforeState.windings.slice(0),\n            multiPolys: [],\n        };\n        const ringsAfter = this._afterState.rings;\n        const windingsAfter = this._afterState.windings;\n        const mpsAfter = this._afterState.multiPolys;\n        // calculate ringsAfter, windingsAfter\n        for (let i = 0, iMax = this.rings.length; i < iMax; i++) {\n            const ring = this.rings[i];\n            const winding = this.windings[i];\n            const index = ringsAfter.indexOf(ring);\n            if (index === -1) {\n                ringsAfter.push(ring);\n                windingsAfter.push(winding);\n            }\n            else\n                windingsAfter[index] += winding;\n        }\n        // calcualte polysAfter\n        const polysAfter = [];\n        const polysExclude = [];\n        for (let i = 0, iMax = ringsAfter.length; i < iMax; i++) {\n            if (windingsAfter[i] === 0)\n                continue; // non-zero rule\n            const ring = ringsAfter[i];\n            const poly = ring.poly;\n            if (polysExclude.indexOf(poly) !== -1)\n                continue;\n            if (ring.isExterior)\n                polysAfter.push(poly);\n            else {\n                if (polysExclude.indexOf(poly) === -1)\n                    polysExclude.push(poly);\n                const index = polysAfter.indexOf(ring.poly);\n                if (index !== -1)\n                    polysAfter.splice(index, 1);\n            }\n        }\n        // calculate multiPolysAfter\n        for (let i = 0, iMax = polysAfter.length; i < iMax; i++) {\n            const mp = polysAfter[i].multiPoly;\n            if (mpsAfter.indexOf(mp) === -1)\n                mpsAfter.push(mp);\n        }\n        return this._afterState;\n    }\n    /* Is this segment part of the final result? */\n    isInResult() {\n        // if we've been consumed, we're not in the result\n        if (this.consumedBy)\n            return false;\n        if (this._isInResult !== undefined)\n            return this._isInResult;\n        const mpsBefore = this.beforeState().multiPolys;\n        const mpsAfter = this.afterState().multiPolys;\n        switch (operation.type) {\n            case \"union\": {\n                // UNION - included iff:\n                //  * On one side of us there is 0 poly interiors AND\n                //  * On the other side there is 1 or more.\n                const noBefores = mpsBefore.length === 0;\n                const noAfters = mpsAfter.length === 0;\n                this._isInResult = noBefores !== noAfters;\n                break;\n            }\n            case \"intersection\": {\n                // INTERSECTION - included iff:\n                //  * on one side of us all multipolys are rep. with poly interiors AND\n                //  * on the other side of us, not all multipolys are repsented\n                //    with poly interiors\n                let least;\n                let most;\n                if (mpsBefore.length < mpsAfter.length) {\n                    least = mpsBefore.length;\n                    most = mpsAfter.length;\n                }\n                else {\n                    least = mpsAfter.length;\n                    most = mpsBefore.length;\n                }\n                this._isInResult = most === operation.numMultiPolys && least < most;\n                break;\n            }\n            case \"xor\": {\n                // XOR - included iff:\n                //  * the difference between the number of multipolys represented\n                //    with poly interiors on our two sides is an odd number\n                const diff = Math.abs(mpsBefore.length - mpsAfter.length);\n                this._isInResult = diff % 2 === 1;\n                break;\n            }\n            case \"difference\": {\n                // DIFFERENCE included iff:\n                //  * on exactly one side, we have just the subject\n                const isJustSubject = (mps) => mps.length === 1 && mps[0].isSubject;\n                this._isInResult = isJustSubject(mpsBefore) !== isJustSubject(mpsAfter);\n                break;\n            }\n        }\n        return this._isInResult;\n    }\n}\n","import BigNumber from \"bignumber.js\";\nimport { precision } from \"./precision.js\";\nimport Segment from \"./segment.js\";\nexport class RingIn {\n    poly;\n    isExterior;\n    segments;\n    bbox;\n    constructor(geomRing, poly, isExterior) {\n        if (!Array.isArray(geomRing) || geomRing.length === 0) {\n            throw new Error(\"Input geometry is not a valid Polygon or MultiPolygon\");\n        }\n        this.poly = poly;\n        this.isExterior = isExterior;\n        this.segments = [];\n        if (typeof geomRing[0][0] !== \"number\" ||\n            typeof geomRing[0][1] !== \"number\") {\n            throw new Error(\"Input geometry is not a valid Polygon or MultiPolygon\");\n        }\n        const firstPoint = precision.snap({ x: new BigNumber(geomRing[0][0]), y: new BigNumber(geomRing[0][1]) });\n        this.bbox = {\n            ll: { x: firstPoint.x, y: firstPoint.y },\n            ur: { x: firstPoint.x, y: firstPoint.y },\n        };\n        let prevPoint = firstPoint;\n        for (let i = 1, iMax = geomRing.length; i < iMax; i++) {\n            if (typeof geomRing[i][0] !== \"number\" ||\n                typeof geomRing[i][1] !== \"number\") {\n                throw new Error(\"Input geometry is not a valid Polygon or MultiPolygon\");\n            }\n            const point = precision.snap({ x: new BigNumber(geomRing[i][0]), y: new BigNumber(geomRing[i][1]) });\n            // skip repeated points\n            if (point.x.eq(prevPoint.x) && point.y.eq(prevPoint.y))\n                continue;\n            this.segments.push(Segment.fromRing(prevPoint, point, this));\n            if (point.x.isLessThan(this.bbox.ll.x))\n                this.bbox.ll.x = point.x;\n            if (point.y.isLessThan(this.bbox.ll.y))\n                this.bbox.ll.y = point.y;\n            if (point.x.isGreaterThan(this.bbox.ur.x))\n                this.bbox.ur.x = point.x;\n            if (point.y.isGreaterThan(this.bbox.ur.y))\n                this.bbox.ur.y = point.y;\n            prevPoint = point;\n        }\n        // add segment from last to first if last is not the same as first\n        if (!firstPoint.x.eq(prevPoint.x) || !firstPoint.y.eq(prevPoint.y)) {\n            this.segments.push(Segment.fromRing(prevPoint, firstPoint, this));\n        }\n    }\n    getSweepEvents() {\n        const sweepEvents = [];\n        for (let i = 0, iMax = this.segments.length; i < iMax; i++) {\n            const segment = this.segments[i];\n            sweepEvents.push(segment.leftSE);\n            sweepEvents.push(segment.rightSE);\n        }\n        return sweepEvents;\n    }\n}\nexport class PolyIn {\n    multiPoly;\n    exteriorRing;\n    interiorRings;\n    bbox;\n    constructor(geomPoly, multiPoly) {\n        if (!Array.isArray(geomPoly)) {\n            throw new Error(\"Input geometry is not a valid Polygon or MultiPolygon\");\n        }\n        this.exteriorRing = new RingIn(geomPoly[0], this, true);\n        // copy by value\n        this.bbox = {\n            ll: { x: this.exteriorRing.bbox.ll.x, y: this.exteriorRing.bbox.ll.y },\n            ur: { x: this.exteriorRing.bbox.ur.x, y: this.exteriorRing.bbox.ur.y },\n        };\n        this.interiorRings = [];\n        for (let i = 1, iMax = geomPoly.length; i < iMax; i++) {\n            const ring = new RingIn(geomPoly[i], this, false);\n            if (ring.bbox.ll.x.isLessThan(this.bbox.ll.x))\n                this.bbox.ll.x = ring.bbox.ll.x;\n            if (ring.bbox.ll.y.isLessThan(this.bbox.ll.y))\n                this.bbox.ll.y = ring.bbox.ll.y;\n            if (ring.bbox.ur.x.isGreaterThan(this.bbox.ur.x))\n                this.bbox.ur.x = ring.bbox.ur.x;\n            if (ring.bbox.ur.y.isGreaterThan(this.bbox.ur.y))\n                this.bbox.ur.y = ring.bbox.ur.y;\n            this.interiorRings.push(ring);\n        }\n        this.multiPoly = multiPoly;\n    }\n    getSweepEvents() {\n        const sweepEvents = this.exteriorRing.getSweepEvents();\n        for (let i = 0, iMax = this.interiorRings.length; i < iMax; i++) {\n            const ringSweepEvents = this.interiorRings[i].getSweepEvents();\n            for (let j = 0, jMax = ringSweepEvents.length; j < jMax; j++) {\n                sweepEvents.push(ringSweepEvents[j]);\n            }\n        }\n        return sweepEvents;\n    }\n}\nexport class MultiPolyIn {\n    isSubject;\n    polys;\n    bbox;\n    constructor(geom, isSubject) {\n        if (!Array.isArray(geom)) {\n            throw new Error(\"Input geometry is not a valid Polygon or MultiPolygon\");\n        }\n        try {\n            // if the input looks like a polygon, convert it to a multipolygon\n            if (typeof geom[0][0][0] === \"number\")\n                geom = [geom];\n        }\n        catch (ex) {\n            // The input is either malformed or has empty arrays.\n            // In either case, it will be handled later on.\n        }\n        this.polys = [];\n        this.bbox = {\n            ll: { x: new BigNumber(Number.POSITIVE_INFINITY), y: new BigNumber(Number.POSITIVE_INFINITY) },\n            ur: { x: new BigNumber(Number.NEGATIVE_INFINITY), y: new BigNumber(Number.NEGATIVE_INFINITY) },\n        };\n        for (let i = 0, iMax = geom.length; i < iMax; i++) {\n            const poly = new PolyIn(geom[i], this);\n            if (poly.bbox.ll.x.isLessThan(this.bbox.ll.x))\n                this.bbox.ll.x = poly.bbox.ll.x;\n            if (poly.bbox.ll.y.isLessThan(this.bbox.ll.y))\n                this.bbox.ll.y = poly.bbox.ll.y;\n            if (poly.bbox.ur.x.isGreaterThan(this.bbox.ur.x))\n                this.bbox.ur.x = poly.bbox.ur.x;\n            if (poly.bbox.ur.y.isGreaterThan(this.bbox.ur.y))\n                this.bbox.ur.y = poly.bbox.ur.y;\n            this.polys.push(poly);\n        }\n        this.isSubject = isSubject;\n    }\n    getSweepEvents() {\n        const sweepEvents = [];\n        for (let i = 0, iMax = this.polys.length; i < iMax; i++) {\n            const polySweepEvents = this.polys[i].getSweepEvents();\n            for (let j = 0, jMax = polySweepEvents.length; j < jMax; j++) {\n                sweepEvents.push(polySweepEvents[j]);\n            }\n        }\n        return sweepEvents;\n    }\n}\n","import { precision } from \"./precision.js\";\nimport SweepEvent from \"./sweep-event.js\";\nexport class RingOut {\n    events;\n    poly;\n    _isExteriorRing;\n    _enclosingRing;\n    /* Given the segments from the sweep line pass, compute & return a series\n     * of closed rings from all the segments marked to be part of the result */\n    static factory(allSegments) {\n        const ringsOut = [];\n        for (let i = 0, iMax = allSegments.length; i < iMax; i++) {\n            const segment = allSegments[i];\n            if (!segment.isInResult() || segment.ringOut)\n                continue;\n            let prevEvent = null;\n            let event = segment.leftSE;\n            let nextEvent = segment.rightSE;\n            const events = [event];\n            const startingPoint = event.point;\n            const intersectionLEs = [];\n            /* Walk the chain of linked events to form a closed ring */\n            while (true) {\n                prevEvent = event;\n                event = nextEvent;\n                events.push(event);\n                /* Is the ring complete? */\n                if (event.point === startingPoint)\n                    break;\n                while (true) {\n                    const availableLEs = event.getAvailableLinkedEvents();\n                    /* Did we hit a dead end? This shouldn't happen. Indicates some earlier\n                     * part of the algorithm malfunctioned... please file a bug report. */\n                    if (availableLEs.length === 0) {\n                        const firstPt = events[0].point;\n                        const lastPt = events[events.length - 1].point;\n                        throw new Error(`Unable to complete output ring starting at [${firstPt.x},` +\n                            ` ${firstPt.y}]. Last matching segment found ends at` +\n                            ` [${lastPt.x}, ${lastPt.y}].`);\n                    }\n                    /* Only one way to go, so cotinue on the path */\n                    if (availableLEs.length === 1) {\n                        nextEvent = availableLEs[0].otherSE;\n                        break;\n                    }\n                    /* We must have an intersection. Check for a completed loop */\n                    let indexLE = null;\n                    for (let j = 0, jMax = intersectionLEs.length; j < jMax; j++) {\n                        if (intersectionLEs[j].point === event.point) {\n                            indexLE = j;\n                            break;\n                        }\n                    }\n                    /* Found a completed loop. Cut that off and make a ring */\n                    if (indexLE !== null) {\n                        const intersectionLE = intersectionLEs.splice(indexLE)[0];\n                        const ringEvents = events.splice(intersectionLE.index);\n                        ringEvents.unshift(ringEvents[0].otherSE);\n                        ringsOut.push(new RingOut(ringEvents.reverse()));\n                        continue;\n                    }\n                    /* register the intersection */\n                    intersectionLEs.push({\n                        index: events.length,\n                        point: event.point,\n                    });\n                    /* Choose the left-most option to continue the walk */\n                    const comparator = event.getLeftmostComparator(prevEvent);\n                    nextEvent = availableLEs.sort(comparator)[0].otherSE;\n                    break;\n                }\n            }\n            ringsOut.push(new RingOut(events));\n        }\n        return ringsOut;\n    }\n    constructor(events) {\n        this.events = events;\n        for (let i = 0, iMax = events.length; i < iMax; i++) {\n            events[i].segment.ringOut = this;\n        }\n        this.poly = null;\n    }\n    getGeom() {\n        // Remove superfluous points (ie extra points along a straight line),\n        let prevPt = this.events[0].point;\n        const points = [prevPt];\n        for (let i = 1, iMax = this.events.length - 1; i < iMax; i++) {\n            const pt = this.events[i].point;\n            const nextPt = this.events[i + 1].point;\n            if (precision.orient(pt, prevPt, nextPt) === 0)\n                continue;\n            points.push(pt);\n            prevPt = pt;\n        }\n        // ring was all (within rounding error of angle calc) colinear points\n        if (points.length === 1)\n            return null;\n        // check if the starting point is necessary\n        const pt = points[0];\n        const nextPt = points[1];\n        if (precision.orient(pt, prevPt, nextPt) === 0)\n            points.shift();\n        points.push(points[0]);\n        const step = this.isExteriorRing() ? 1 : -1;\n        const iStart = this.isExteriorRing() ? 0 : points.length - 1;\n        const iEnd = this.isExteriorRing() ? points.length : -1;\n        const orderedPoints = [];\n        for (let i = iStart; i != iEnd; i += step)\n            orderedPoints.push([points[i].x.toNumber(), points[i].y.toNumber()]);\n        return orderedPoints;\n    }\n    isExteriorRing() {\n        if (this._isExteriorRing === undefined) {\n            const enclosing = this.enclosingRing();\n            this._isExteriorRing = enclosing ? !enclosing.isExteriorRing() : true;\n        }\n        return this._isExteriorRing;\n    }\n    enclosingRing() {\n        if (this._enclosingRing === undefined) {\n            this._enclosingRing = this._calcEnclosingRing();\n        }\n        return this._enclosingRing;\n    }\n    /* Returns the ring that encloses this one, if any */\n    _calcEnclosingRing() {\n        // start with the ealier sweep line event so that the prevSeg\n        // chain doesn't lead us inside of a loop of ours\n        let leftMostEvt = this.events[0];\n        for (let i = 1, iMax = this.events.length; i < iMax; i++) {\n            const evt = this.events[i];\n            if (SweepEvent.compare(leftMostEvt, evt) > 0)\n                leftMostEvt = evt;\n        }\n        let prevSeg = leftMostEvt.segment.prevInResult();\n        let prevPrevSeg = prevSeg ? prevSeg.prevInResult() : null;\n        while (true) {\n            // no segment found, thus no ring can enclose us\n            if (!prevSeg)\n                return null;\n            // no segments below prev segment found, thus the ring of the prev\n            // segment must loop back around and enclose us\n            if (!prevPrevSeg)\n                return prevSeg.ringOut;\n            // if the two segments are of different rings, the ring of the prev\n            // segment must either loop around us or the ring of the prev prev\n            // seg, which would make us and the ring of the prev peers\n            if (prevPrevSeg.ringOut !== prevSeg.ringOut) {\n                if (prevPrevSeg.ringOut?.enclosingRing() !== prevSeg.ringOut) {\n                    return prevSeg.ringOut;\n                }\n                else\n                    return prevSeg.ringOut?.enclosingRing();\n            }\n            // two segments are from the same ring, so this was a penisula\n            // of that ring. iterate downward, keep searching\n            prevSeg = prevPrevSeg.prevInResult();\n            prevPrevSeg = prevSeg ? prevSeg.prevInResult() : null;\n        }\n    }\n}\nexport class PolyOut {\n    exteriorRing;\n    interiorRings;\n    constructor(exteriorRing) {\n        this.exteriorRing = exteriorRing;\n        exteriorRing.poly = this;\n        this.interiorRings = [];\n    }\n    addInterior(ring) {\n        this.interiorRings.push(ring);\n        ring.poly = this;\n    }\n    getGeom() {\n        const geom0 = this.exteriorRing.getGeom();\n        // exterior ring was all (within rounding error of angle calc) colinear points\n        if (geom0 === null)\n            return null;\n        const geom = [geom0];\n        for (let i = 0, iMax = this.interiorRings.length; i < iMax; i++) {\n            const ringGeom = this.interiorRings[i].getGeom();\n            // interior ring was all (within rounding error of angle calc) colinear points\n            if (ringGeom === null)\n                continue;\n            geom.push(ringGeom);\n        }\n        return geom;\n    }\n}\nexport class MultiPolyOut {\n    rings;\n    polys;\n    constructor(rings) {\n        this.rings = rings;\n        this.polys = this._composePolys(rings);\n    }\n    getGeom() {\n        const geom = [];\n        for (let i = 0, iMax = this.polys.length; i < iMax; i++) {\n            const polyGeom = this.polys[i].getGeom();\n            // exterior ring was all (within rounding error of angle calc) colinear points\n            if (polyGeom === null)\n                continue;\n            geom.push(polyGeom);\n        }\n        return geom;\n    }\n    _composePolys(rings) {\n        const polys = [];\n        for (let i = 0, iMax = rings.length; i < iMax; i++) {\n            const ring = rings[i];\n            if (ring.poly)\n                continue;\n            if (ring.isExteriorRing())\n                polys.push(new PolyOut(ring));\n            else {\n                const enclosingRing = ring.enclosingRing();\n                if (!enclosingRing?.poly)\n                    polys.push(new PolyOut(enclosingRing));\n                enclosingRing?.poly?.addInterior(ring);\n            }\n        }\n        return polys;\n    }\n}\n","import { SplayTreeSet } from \"splaytree-ts\";\nimport Segment from \"./segment.js\";\nimport SweepEvent from \"./sweep-event.js\";\n/**\n * NOTE:  We must be careful not to change any segments while\n *        they are in the SplayTree. AFAIK, there's no way to tell\n *        the tree to rebalance itself - thus before splitting\n *        a segment that's in the tree, we remove it from the tree,\n *        do the split, then re-insert it. (Even though splitting a\n *        segment *shouldn't* change its correct position in the\n *        sweep line tree, the reality is because of rounding errors,\n *        it sometimes does.)\n */\nexport default class SweepLine {\n    queue;\n    tree;\n    segments;\n    constructor(queue, comparator = Segment.compare) {\n        this.queue = queue;\n        this.tree = new SplayTreeSet(comparator);\n        this.segments = [];\n    }\n    process(event) {\n        const segment = event.segment;\n        const newEvents = [];\n        // if we've already been consumed by another segment,\n        // clean up our body parts and get out\n        if (event.consumedBy) {\n            if (event.isLeft)\n                this.queue.delete(event.otherSE);\n            else\n                this.tree.delete(segment);\n            return newEvents;\n        }\n        if (event.isLeft)\n            this.tree.add(segment);\n        let prevSeg = segment;\n        let nextSeg = segment;\n        // skip consumed segments still in tree\n        do {\n            prevSeg = this.tree.lastBefore(prevSeg);\n        } while (prevSeg != null && prevSeg.consumedBy != undefined);\n        // skip consumed segments still in tree\n        do {\n            nextSeg = this.tree.firstAfter(nextSeg);\n        } while (nextSeg != null && nextSeg.consumedBy != undefined);\n        if (event.isLeft) {\n            // Check for intersections against the previous segment in the sweep line\n            let prevMySplitter = null;\n            if (prevSeg) {\n                const prevInter = prevSeg.getIntersection(segment);\n                if (prevInter !== null) {\n                    if (!segment.isAnEndpoint(prevInter))\n                        prevMySplitter = prevInter;\n                    if (!prevSeg.isAnEndpoint(prevInter)) {\n                        const newEventsFromSplit = this._splitSafely(prevSeg, prevInter);\n                        for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n                            newEvents.push(newEventsFromSplit[i]);\n                        }\n                    }\n                }\n            }\n            // Check for intersections against the next segment in the sweep line\n            let nextMySplitter = null;\n            if (nextSeg) {\n                const nextInter = nextSeg.getIntersection(segment);\n                if (nextInter !== null) {\n                    if (!segment.isAnEndpoint(nextInter))\n                        nextMySplitter = nextInter;\n                    if (!nextSeg.isAnEndpoint(nextInter)) {\n                        const newEventsFromSplit = this._splitSafely(nextSeg, nextInter);\n                        for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n                            newEvents.push(newEventsFromSplit[i]);\n                        }\n                    }\n                }\n            }\n            // For simplicity, even if we find more than one intersection we only\n            // spilt on the 'earliest' (sweep-line style) of the intersections.\n            // The other intersection will be handled in a future process().\n            if (prevMySplitter !== null || nextMySplitter !== null) {\n                let mySplitter = null;\n                if (prevMySplitter === null)\n                    mySplitter = nextMySplitter;\n                else if (nextMySplitter === null)\n                    mySplitter = prevMySplitter;\n                else {\n                    const cmpSplitters = SweepEvent.comparePoints(prevMySplitter, nextMySplitter);\n                    mySplitter = cmpSplitters <= 0 ? prevMySplitter : nextMySplitter;\n                }\n                // Rounding errors can cause changes in ordering,\n                // so remove afected segments and right sweep events before splitting\n                this.queue.delete(segment.rightSE);\n                newEvents.push(segment.rightSE);\n                const newEventsFromSplit = segment.split(mySplitter);\n                for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n                    newEvents.push(newEventsFromSplit[i]);\n                }\n            }\n            if (newEvents.length > 0) {\n                // We found some intersections, so re-do the current event to\n                // make sure sweep line ordering is totally consistent for later\n                // use with the segment 'prev' pointers\n                this.tree.delete(segment);\n                newEvents.push(event);\n            }\n            else {\n                // done with left event\n                this.segments.push(segment);\n                segment.prev = prevSeg;\n            }\n        }\n        else {\n            // event.isRight\n            // since we're about to be removed from the sweep line, check for\n            // intersections between our previous and next segments\n            if (prevSeg && nextSeg) {\n                const inter = prevSeg.getIntersection(nextSeg);\n                if (inter !== null) {\n                    if (!prevSeg.isAnEndpoint(inter)) {\n                        const newEventsFromSplit = this._splitSafely(prevSeg, inter);\n                        for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n                            newEvents.push(newEventsFromSplit[i]);\n                        }\n                    }\n                    if (!nextSeg.isAnEndpoint(inter)) {\n                        const newEventsFromSplit = this._splitSafely(nextSeg, inter);\n                        for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n                            newEvents.push(newEventsFromSplit[i]);\n                        }\n                    }\n                }\n            }\n            this.tree.delete(segment);\n        }\n        return newEvents;\n    }\n    /* Safely split a segment that is currently in the datastructures\n     * IE - a segment other than the one that is currently being processed. */\n    _splitSafely(seg, pt) {\n        // Rounding errors can cause changes in ordering,\n        // so remove afected segments and right sweep events before splitting\n        // removeNode() doesn't work, so have re-find the seg\n        // https://github.com/w8r/splay-tree/pull/5\n        this.tree.delete(seg);\n        const rightSE = seg.rightSE;\n        this.queue.delete(rightSE);\n        const newEvents = seg.split(pt);\n        newEvents.push(rightSE);\n        // splitting can trigger consumption\n        if (seg.consumedBy === undefined)\n            this.tree.add(seg);\n        return newEvents;\n    }\n}\n","import { SplayTreeSet } from \"splaytree-ts\";\nimport { getBboxOverlap } from \"./bbox.js\";\nimport * as geomIn from \"./geom-in.js\";\nimport * as geomOut from \"./geom-out.js\";\nimport { precision } from \"./precision.js\";\nimport SweepEvent from \"./sweep-event.js\";\nimport SweepLine from \"./sweep-line.js\";\nexport class Operation {\n    type;\n    numMultiPolys;\n    run(type, geom, moreGeoms) {\n        operation.type = type;\n        /* Convert inputs to MultiPoly objects */\n        const multipolys = [new geomIn.MultiPolyIn(geom, true)];\n        for (let i = 0, iMax = moreGeoms.length; i < iMax; i++) {\n            multipolys.push(new geomIn.MultiPolyIn(moreGeoms[i], false));\n        }\n        operation.numMultiPolys = multipolys.length;\n        /* BBox optimization for difference operation\n         * If the bbox of a multipolygon that's part of the clipping doesn't\n         * intersect the bbox of the subject at all, we can just drop that\n         * multiploygon. */\n        if (operation.type === \"difference\") {\n            // in place removal\n            const subject = multipolys[0];\n            let i = 1;\n            while (i < multipolys.length) {\n                if (getBboxOverlap(multipolys[i].bbox, subject.bbox) !== null)\n                    i++;\n                else\n                    multipolys.splice(i, 1);\n            }\n        }\n        /* BBox optimization for intersection operation\n         * If we can find any pair of multipolygons whose bbox does not overlap,\n         * then the result will be empty. */\n        if (operation.type === \"intersection\") {\n            // TODO: this is O(n^2) in number of polygons. By sorting the bboxes,\n            //       it could be optimized to O(n * ln(n))\n            for (let i = 0, iMax = multipolys.length; i < iMax; i++) {\n                const mpA = multipolys[i];\n                for (let j = i + 1, jMax = multipolys.length; j < jMax; j++) {\n                    if (getBboxOverlap(mpA.bbox, multipolys[j].bbox) === null)\n                        return [];\n                }\n            }\n        }\n        /* Put segment endpoints in a priority queue */\n        const queue = new SplayTreeSet(SweepEvent.compare);\n        for (let i = 0, iMax = multipolys.length; i < iMax; i++) {\n            const sweepEvents = multipolys[i].getSweepEvents();\n            for (let j = 0, jMax = sweepEvents.length; j < jMax; j++) {\n                queue.add(sweepEvents[j]);\n            }\n        }\n        /* Pass the sweep line over those endpoints */\n        const sweepLine = new SweepLine(queue);\n        let evt = null;\n        if (queue.size != 0) {\n            evt = queue.first();\n            queue.delete(evt);\n        }\n        while (evt) {\n            const newEvents = sweepLine.process(evt);\n            for (let i = 0, iMax = newEvents.length; i < iMax; i++) {\n                const evt = newEvents[i];\n                if (evt.consumedBy === undefined)\n                    queue.add(evt);\n            }\n            if (queue.size != 0) {\n                evt = queue.first();\n                queue.delete(evt);\n            }\n            else {\n                evt = null;\n            }\n        }\n        // free some memory we don't need anymore\n        precision.reset();\n        /* Collect and compile segments we're keeping into a multipolygon */\n        const ringsOut = geomOut.RingOut.factory(sweepLine.segments);\n        const result = new geomOut.MultiPolyOut(ringsOut);\n        return result.getGeom();\n    }\n}\n// singleton available by import\nconst operation = new Operation();\nexport default operation;\n","import { precision } from \"./precision.js\";\nimport operation from \"./operation.js\";\nexport const union = (geom, ...moreGeoms) => operation.run(\"union\", geom, moreGeoms);\nexport const intersection = (geom, ...moreGeoms) => operation.run(\"intersection\", geom, moreGeoms);\nexport const xor = (geom, ...moreGeoms) => operation.run(\"xor\", geom, moreGeoms);\nexport const difference = (geom, ...moreGeoms) => operation.run(\"difference\", geom, moreGeoms);\nexport const setPrecision = precision.set;\n","/// 2D vector\nexport interface Vec {\n  readonly x: number\n  readonly y: number\n}\n\nexport const norm = ({ x, y }: Vec, d = Math.hypot(x, y)): Vec => ({ x: x / d, y: y / d })\nexport const add = (a: Vec, b: Vec): Vec => ({ x: a.x + b.x, y: a.y + b.y })\nexport const sub = (a: Vec, b: Vec): Vec => ({ x: a.x - b.x, y: a.y - b.y })\nexport const mul = (a: Vec, n: number): Vec => ({ x: a.x * n, y: a.y * n })\nexport const per = ({ x, y }: Vec): Vec => ({ x: y, y: -x })\nexport const neg = ({ x, y }: Vec): Vec => ({ x: -x, y: -y })\nexport const mid = (a: Vec, b: Vec): Vec => ({ x: (a.x + b.x) / 2, y: (a.y + b.y) / 2 })\n\n/// Rotate point `(x, y)` around point `C` in raidus `r`.\nexport const rot = ({ x, y }: Vec, C: Vec, r: number) => {\n  const s = Math.sin(r), c = Math.cos(r),\n        px = x - C.x, py = y - C.y,\n        nx = px * c - py * s,\n        ny = px * s + py * c\n  return { x: nx + C.x, y: ny + C.y }\n}\n\nexport const dot = (a: Vec, b: Vec) => a.x * b.x + a.y * b.y\nexport const lerp = (a: Vec, b: Vec, t: number) => add(a, mul(sub(b, a), t))\nexport const proj = (a: Vec, b: Vec, c: number) => add(a, mul(b, c))\n\nexport const clamp = (val: number, min: number, max: number) => val < min ? min : val > max ? max : val\n","import type { RawPoint } from './ink'\nimport { clamp } from './vec'\n\nconst enum C {\n  // Zoom speed by mouse wheel.\n  Scale = 0.035,\n  // Prevent zooming too fast.\n  MinScale = -40, ScaleRate = 0.02,\n}\n\n// Extract function params or `never`.\ntype Params<Fn = any> = Fn extends (...args: any) => any ? Parameters<Fn> : never\n\n/// Handles named events.\nclass Observable<EventMap = any> {\n  /// @internal\n  _observers = new Map<any, Set<any>>()\n\n  /// Listen to an event.\n  on<E extends keyof EventMap>(event: E, fn: EventMap[E]): () => void {\n    let set = this._observers.get(event)\n    if (set === undefined) {\n      this._observers.set(event, set = new Set())\n    }\n    set.add(fn)\n    return this.off.bind(this, event, fn)\n  }\n\n  /// Stop listening to an event.\n  off<E extends keyof EventMap>(event: E, fn: EventMap[E]): void {\n    let set = this._observers.get(event)\n    if (set !== undefined) {\n      set.delete(fn)\n      if (set.size == 0) this._observers.delete(event)\n    }\n  }\n\n  /// Emit an event.\n  emit<E extends keyof EventMap>(event: E, ...args: Params<EventMap[E]>): void {\n    let set = this._observers.get(event)\n    if (set) set.forEach(f => this._invoke(f, args))\n  }\n\n  /// @internal\n  _invoke(f: any, args: any) {\n    try {\n      f(...args)\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  /// Remove all subscribers.\n  dispose() {\n    this._observers.clear()\n  }\n}\n\ninterface InputWheelEvent {\n  readonly x: number\n  readonly y: number\n  readonly deltaX: number\n  readonly deltaY: number\n  readonly deltaScale: number\n}\n\ninterface InputPinchEvent extends InputWheelEvent {\n  /// - `0`: start pinch & zoom\n  /// - `1`: update pinch & zoom (user touch not end)\n  /// - `2`: pinch & zoom done\n  readonly phase: 0 | 1 | 2\n}\n\nexport interface InputEventMap {\n  'open': (pointerId: number, point: RawPoint) => void\n  'update': (pointerId: number, point: RawPoint) => void\n  'cancel': (pointerId: number) => void\n  'close': (pointerId: number) => void\n  'wheel': (event: InputWheelEvent) => void\n  'pinch': (event: InputPinchEvent) => void\n}\n\nexport interface InputConfig {\n  /// The element to bind events like `pointermove`.\n  dom?: HTMLElement | SVGElement\n  /// Whether to stop reporting events, default is `false`.\n  paused?: boolean\n  /// Whether to handle pinch zoom gestures (multi-touch), default is `true`.\n  /// If `false`, multi-touch inputs will be treated as separate strokes.\n  gesture?: boolean\n  /// Whether to use `pointerEvent.pressure`, default is `true`.\n  /// If `false`, it will always use `0.5` as the pressure number.\n  /// Or you can set it as a custom number ranges in (0, 1].\n  pressure?: boolean | number\n}\n\n/// Helper class to handle pointer events.\n/// To disable intrinsic user agent touch behaviors (such as panning or zooming),\n/// add style `touch-action: none` to the target element.\nexport class Input extends Observable<InputEventMap> {\n  /// @internal pointerId => pointerEvent\n  readonly _map = new Map<number, PointerEvent>()\n  /// @internal\n  _dom?: HTMLElement | SVGElement\n  /// @internal\n  _unlistenDOM?: () => void\n  /// @internal It will be set in pointerdown, so never be undefined.\n  _rect: DOMRect\n  /// @internal\n  _browser: { windows: boolean, mac: boolean }\n\n  /// @internal\n  constructor(\n    /// Whether to stop reporting events, default is `false`.\n    public paused = false,\n    /// Whether to handle pinch zoom gestures (multi-touch), default is `true`.\n    /// - `true`: Multi-touch events will fire a `cancel` stroke event and `pinch` events follows.\n    /// - `false`: Treat each `pointerId` as a single stroke.\n    /// - `\"strict\"`: Same as `true`, but only when `pointerType` is `\"touch\"`.\n    public gesture: boolean | \"strict\" = true,\n    /// Whether to use the `pressure` property from pointer events, default is `true`.\n    /// - `true`: Use pressure from pointer events.\n    /// - `false`: Same as `0.5`.\n    /// - number range from 0 (exclusive) to 1 (inclusive): Use this value as pressure.\n    public pressure: boolean | number = true,\n  ) {\n    super()\n    const nav = typeof navigator != 'undefined' ? navigator : { platform: \"\" }\n    this._browser = {\n      mac: /Mac/.test(nav.platform),\n      windows: /Win/.test(nav.platform),\n    }\n  }\n\n  /// The element to bind events like `pointermove`.\n  get dom(): HTMLElement | SVGElement | undefined { return this._dom }\n  set dom(v: HTMLElement | SVGElement | undefined) {\n    if (this._dom == v) return\n    this._dom = v\n    this._listen(this._dom, {\n      pointerdown: this._onpointerdown,\n      pointermove: this._onpointermove,\n      pointerup: this._onpointerup,\n      pointerout: this._onpointerup,\n      pointercancel: this._onpointercancel,\n      wheel: this._onwheel,\n    })\n    if (this._dom) this._rect = this._dom.getBoundingClientRect()\n  }\n\n  pause(): void { this.paused = true }\n  resume(): void { this.paused = false }\n\n  /// @internal\n  _listen(element: HTMLElement | SVGElement | undefined, eventMap: { [name: string]: (...args: any) => any }) {\n    if (this._unlistenDOM) {\n      this._unlistenDOM()\n      this._unlistenDOM = void 0\n    }\n    if (element) {\n      for (let name in eventMap) element.addEventListener(name, eventMap[name])\n      this._unlistenDOM = () => { for (let name in eventMap) element.removeEventListener(name, eventMap[name]) }\n    }\n  }\n\n  /// @internal\n  _mapPressure(real: number): number {\n    return this.pressure === true ? real : clamp(this.pressure || 0.5, 0, 1)\n  }\n\n  /// @internal\n  _mapGesture(ev: PointerEvent): boolean {\n    return this.gesture === true || (this.gesture && ev.pointerType == 'touch')\n  }\n\n  /// @internal\n  _pinch: Pinch | null\n\n  /// @internal\n  _onpointerdown = (ev: PointerEvent) => {\n    if (this.paused) return\n    let id = ev.pointerId\n    if (this._map.has(id)) this.emit('cancel', id)\n    this._map.set(id, ev)\n    ev.preventDefault()\n    ev.stopPropagation()\n    this._dom!.setPointerCapture(id)\n    let rect = this._rect = this._dom!.getBoundingClientRect()\n    if (this._mapGesture(ev) && this._map.size > 1) {\n      let pinch = this._pinch = new Pinch(this)\n      // Emit 'cancel' to all other strokes.\n      this._map.forEach((ev2, id2) => {\n        if (!pinch.has(id2)) {\n          if (id != id2) this.emit('cancel', id2)\n          pinch.add(ev2)\n        }\n      })\n    } else {\n      this.emit('open', id, { x: ev.clientX - rect.left, y: ev.clientY - rect.top, r: this._mapPressure(ev.pressure) })\n    }\n  }\n\n  /// @internal\n  _onpointermove = (ev: PointerEvent) => {\n    if (this.paused) return\n    let id = ev.pointerId\n    ev.preventDefault()\n    ev.stopPropagation()\n    if (this._map.has(id)) {\n      let ev0 = this._map.get(id)!\n      // Apple pencil's bug, it fires 2 identical events.\n      if (ev0.clientX == ev.clientX && ev0.clientY == ev.clientY) return\n      this._map.set(id, ev)\n      if (this._pinch) {\n        this._pinch.move(ev)\n      } else {\n        // Firefox's bug, it gives 0 to pointer events generated by mouse.\n        let pressure: number | undefined\n        if (ev.pointerType == 'mouse' && ev.pressure == 0) pressure = this._mapPressure(0.5)\n        let { left, top } = this._rect\n        // @ts-ignore Get the most precise pointer events.\n        if (ev.getCoalescedEvents) for (let ev1 of ev.getCoalescedEvents()) {\n          this.emit('update', id, { x: ev1.clientX - left, y: ev1.clientY - top, r: pressure ?? this._mapPressure(ev.pressure) })\n        } else {\n          this.emit('update', id, { x: ev.clientX - left, y: ev.clientY - top, r: pressure ?? this._mapPressure(ev.pressure) })\n        }\n      }\n    }\n  }\n\n  /// @internal\n  _onpointerup = (ev: PointerEvent) => {\n    if (this.paused) return\n    let id = ev.pointerId\n    ev.preventDefault()\n    ev.stopPropagation()\n    if (this._map.has(id)) {\n      if (this._pinch) {\n        this._pinch.delete(id)\n        if (this._pinch.empty) this._pinch = null\n      } else {\n        let { left, top } = this._rect\n        // @ts-ignore Safari does not have this method.\n        if (ev.getPredictedEvents) {\n          let pred = this._map.get(id)?.getPredictedEvents()[0]\n          if (pred) this.emit('update', id, {\n            x: pred.clientX - left,\n            y: pred.clientY - top,\n            r: this._mapPressure(pred.pressure),\n          })\n        }\n        this.emit('close', id)\n      }\n      this._map.delete(id)\n    }\n  }\n\n  /// @internal\n  _onpointercancel = (ev: PointerEvent) => {\n    if (this.paused) return\n    let id = ev.pointerId\n    ev.preventDefault()\n    ev.stopPropagation()\n    this._map.delete(id)\n    if (this._pinch) {\n      this._pinch.delete(id)\n      if (this._pinch.empty) this._pinch = null\n    } else {\n      this.emit('cancel', id)\n    }\n  }\n\n  /// @internal\n  _onwheel = (ev: WheelEvent) => {\n    if (this.paused) return\n    ev.preventDefault()\n    ev.stopPropagation()\n    let { deltaX, deltaY } = ev\n    let scale = Math.hypot(deltaX, deltaY)\n    let x = 0, y = 0\n    if (this._browser.windows) { scale = -scale }\n    if (deltaX + deltaY < 0) { scale = -scale }\n    // macOS zoom by trackpad\n    if (this._browser.mac && ev.ctrlKey) { scale = -scale * 0.5 }\n    // macOS scroll by trackpad\n    else if (this._browser.mac && ((ev as any).wheelDelta % 120 != 0 || ev.movementX != 0 || ev.deltaX != 0)\n      // Windows scroll by mouse wheel\n      || this._browser.windows && !ev.ctrlKey) {\n      x = -deltaX\n      y = -deltaY\n      scale = 0\n    }\n    // Normal zoom by scroll.\n    else { scale *= C.Scale }\n    scale = Math.max(scale, C.MinScale) * C.ScaleRate\n    let { left, top } = this._rect\n    this.emit('wheel', { x: ev.clientX - left, y: ev.clientY - top, deltaX: x, deltaY: y, deltaScale: scale })\n  }\n\n  /// Remove all subscribers and DOM listeners.\n  override dispose(): void {\n    if (this._unlistenDOM) {\n      this._unlistenDOM()\n      this._unlistenDOM = void 0\n    }\n    super.dispose()\n  }\n\n  /// Create a new input handler.\n  static create(config: InputConfig = {}) {\n    let input = new Input(config.paused, config.gesture, config.pressure)\n    input.dom = config.dom\n    return input\n  }\n}\n\ninterface PinchDesc {\n  readonly x: number\n  readonly y: number\n  readonly d: number\n}\n\nclass Pinch {\n  readonly points = new Map<number, PointerEvent>()\n  // This pinch runs from (x0, y0, 1) to (x1, y1, scale).\n  x0 = 0; y0 = 0; x1 = 0; y1 = 0; scale = 1\n  ox = 0; oy = 0; rate = 1; initialized = false; size = 0\n\n  constructor(readonly input: Input) {}\n\n  get empty(): boolean { return this.points.size == 0 }\n\n  has(id: number): boolean { return this.points.has(id) }\n\n  add(ev: PointerEvent) {\n    this.points.set(ev.pointerId, ev)\n    this.update()\n  }\n\n  move(ev: PointerEvent) {\n    this.points.set(ev.pointerId, ev)\n    this.update()\n  }\n\n  delete(id: number) {\n    this.points.delete(id)\n    this.update()\n  }\n\n  update() {\n    let desc = this.desc(), phase: InputPinchEvent[\"phase\"] = 1\n    if (this.size == 0 && this.points.size == 1) { phase = 0 }\n    else if (this.size > 0 && this.points.size == 0) { phase = 2 }\n    if (this.initialized) {\n      if (this.size !== this.points.size) {\n        this.ox = this.x1 - desc.x\n        this.oy = this.y1 - desc.y\n        this.rate = this.scale / desc.d\n        this.size = this.points.size\n      }\n      this.x1 = desc.x + this.ox\n      this.y1 = desc.y + this.oy\n      this.scale = desc.d * this.rate\n    } else {\n      this.ox = this.oy = 0\n      this.rate = 1 / desc.d\n      this.x1 = this.x0 = desc.x\n      this.y1 = this.y0 = desc.y\n      this.scale = 1\n      this.size = this.points.size\n      this.initialized = true\n    }\n    this.input.emit('pinch', {\n      phase,\n      x: this.x0,\n      y: this.y0,\n      deltaX: this.x0 - this.x1 / this.scale,\n      deltaY: this.y0 - this.y1 / this.scale,\n      deltaScale: this.scale,\n    })\n  }\n\n  desc(): PinchDesc {\n    let x = 0, y = 0, d = 0\n    for (let ev of this.points.values()) {\n      x += ev.clientX\n      y += ev.clientY\n    }\n    if (this.points.size > 0) {\n      x /= this.points.size\n      y /= this.points.size\n    }\n    for (let ev of this.points.values()) {\n      d += Math.hypot(ev.clientX - x, ev.clientY - y)\n    }\n    return { x, y, d: d || 1 }\n  }\n}\n","import { add, clamp, dot, lerp, mul, neg, norm, per, proj, rot, sub, type Vec } from './vec'\n\nexport type { Vec }\n\n// Internal constants, I don't plan to expose them as options.\nconst enum C {\n  // SAI-like input smoothing strategy: keep a queue of points\n  // and get middle of them. The queue size is `Smoothing + 1`.\n  Smoothing = 0,\n  // Skip points that are too close.\n  SkipDistance = 4,\n  // If |segment| < `MinDistance` and is sharp corner, split here\n  // and skip next `CoolingDown` points for performance.\n  // `CoolingDown` must > 0.\n  MinDistance = 1000, CoolingDown = 1,\n  // If the last |segment| > `TailDistance * size`, draw a thinner tail,\n  // otherwise draw an end cap.\n  TailDistance = 0.4,\n  // Math.PI + 0.0001 to prevent floating number issue when drawing the cap.\n  PI = 3.1416926535897933,\n  // Simulate pressure for mouse and trackpad.\n  PressureChangeSpeed = 0.3,\n  // Approximate ratio that multiplies `size` to draw a dot.\n  DotSize = 0.36,\n  // Minimal stroke width / 2.\n  MinRadius = 0.75,\n}\n\nexport interface RawPoint extends Vec {\n  readonly r: number\n}\n\n/// The data structure for a point with its context information.\nclass Point {\n  /// @internal\n  constructor(\n    /// The point's position.\n    readonly p: Vec,\n    /// Radius or pressure.\n    readonly r: number,\n    /// The inverted direction of this point, equals to `previous - current`.\n    /// The first point's `v` is a dummy value.\n    readonly v: Vec,\n    /// Distance to previous point, equals to `hypot(previous - current)`.\n    readonly d: number,\n    /// Running length, the last point's `l` is the stroke's approximate length.\n    readonly l: number,\n  ) {}\n\n  /// @internal\n  toJSON(): any {\n    return [this.p.x, this.p.y, this.r]\n  }\n\n  /// @internal Returns a shallow copy of this point, with raidus changed.\n  dup(r = this.r): Point {\n    return new Point(this.p, r, this.v, this.d, this.l)\n  }\n}\n\n/// The data structure for a single stroke, which contains many points.\nexport class Stroke {\n  /// Indexes to split `points` into curves. The first index is always `0`.\n  readonly sections: number[] = [0]\n  /// @internal See `insert()`.\n  readonly pending: { [from: number]: RawPoint[] } = { __proto__: null } as any\n  /// @internal See `updateCurr()`.\n  readonly queue: Vec[] = []\n\n  /// @internal\n  constructor(\n    /// The stroke's points. It is guaranteed that this is a grow-only immutable array.\n    readonly points: Point[],\n    /// The stroke's length, equals to `points.at(-1).l`.\n    /// `insert()` and `push()` will update this value.\n    readonly length = points.length > 0 ? points[points.length - 1].l : 0,\n  ) {\n    this.updateSections()\n  }\n\n  /// True when `points` is empty.\n  get empty(): boolean { return this.points.length == 0 }\n\n  /// True when `points` contains exactly one element.\n  get dot(): boolean { return this.points.length == 1 }\n\n  /// Update the stroke with new points inserted from `from`.\n  /// `from` can exceed `points.length`, where the points will be\n  /// pending unless there are new points fill in the hole.\n  insert(from: number, raw: RawPoint[]): void {\n    if (from == this.points.length) {\n      raw.forEach(p => this.push(p, true))\n      from = this.points.length\n      if ((raw = this.pending[from])) {\n        delete this.pending[from]\n        this.insert(from, raw)\n      }\n      // Recursively call `insert()` to flush pending points.\n      // Ensure `updateSections()` is called at the end or recursion.\n      else {\n        this.updateSections()\n      }\n    }\n    else if (from > this.points.length) {\n      if (__DEV__ && this.pending[from])\n        console.warn(`Override pending points from ${from}`)\n      this.pending[from] = raw\n    }\n    else {\n      throw new RangeError(`Position ${from} conflicts with existing points`)\n    }\n  }\n\n  /// Update the stroke with new point appended to the end of `points`.\n  /// If `skip_sections` is `true`, it will not update `sections`.\n  push(p: RawPoint, skip_sections = false): void {\n    let { points } = this\n    if (points.length > 0) {\n      let curr: RawPoint, prev_ = points[points.length-1]\n      // @ts-ignore No smoothing, get the raw input.\n      if (C.Smoothing == 0) curr = p\n      // @ts-ignore Level-1 smoothing, get the center of each segment.\n      else if (C.Smoothing == 1)\n        curr = { x: (p.x + prev_.p.x) / 2, y: (p.y + prev_.p.y) / 2, r: p.r }\n      // Level-N smoothing\n      else {\n        curr = this.updateCurr(p, C.Smoothing + 1)\n      }\n      let prev = prev_.p, d = Math.hypot(curr.x - prev.x, curr.y - prev.y);\n      this.updateLength(d)\n      if (this.length - prev_.l < C.SkipDistance) {\n        // Skip this point, but preserve its pressure.\n        (prev_ as { r: number }).r = Math.max(prev_.r, curr.r)\n        return\n      }\n      points.push(new Point(curr, curr.r, norm(sub(prev, curr)), d, this.length))\n      if (!skip_sections) this.updateSections()\n    }\n    else {\n      points.push(new Point(p, p.r, { x: 1, y: 1 }, 0, 0))\n    }\n  }\n\n  /// Compute the outline points of the section starting at `from`.\n  /// Returns an empty array if `from` is not zero and not in `sections`.\n  /// `size` is the full width when pressure is 1.\n  outline(from: number, size: number): Vec[] {\n    let end = this.sections.find(end => from < end)\n    // Get one more point at head to connect curves.\n    let points = this.points.slice(from > 0 ? from - 1 : from, end)\n    if (points.length > 1) {\n      let leftPoints: Vec[] = [], rightPoints: Vec[] = [], len = points.length,\n          radius = size, prevPressure = points[0].r, drawEndCap = true\n      // If `end` is `undefined`, this is the final section. Draw a thinner tail when possible.\n      if (end == null && len >= 2) {\n        let p2 = points[len - 2];\n        // The precisely comparing to `0.5` and `1.0` is probably a mouse event (i.e. no real pressure).\n        if ((p2.r == 0.5 || p2.r == 1.0) && p2.d > C.TailDistance * size) {\n          points[len - 1] = points[len - 1].dup(0.05)\n          points[len - 2] = p2.dup(Math.max(0.1, p2.r - 0.3))\n          let p3 = len >= 3 ? points[len - 3] : null\n          if (p3) points[len - 3] = p3.dup(Math.max(0.1, p3.r - 0.1))\n          drawEndCap = false\n        }\n      }\n      // Simulate pressure and push left/right points.\n      for (let i = 0; i < len; i++) {\n        let { p, r, v, d } = points[i]\n        // Fix first point's distance and direction (assume the same as the next point).\n        if (i == 0) {\n          d = 0\n          // Because `points.length > 1`, `points[1]` must exist.\n          v = points[1].v\n        }\n        let sp = Math.min(1, d / size), rp = Math.min(1, 1 - sp),\n            pressure = Math.min(1, prevPressure + (rp - prevPressure) * (sp * C.PressureChangeSpeed)),\n            nextVector = (i < len - 1 ?  points[i + 1] : points[i]).v,\n            nextDot = i < len - 1 ? dot(v, nextVector) : 1\n\n        radius = clamp(size * 0.5 * pressure, C.MinRadius, size / 2)\n\n        let offset = mul(per(lerp(nextVector, v, nextDot)), radius)\n        let pl = sub(p, offset); leftPoints.push(pl)\n        let pr = add(p, offset); rightPoints.push(pr)\n\n        prevPressure = r\n      }\n      let startCap: Vec[] = [], endCap: Vec[] = []\n      for (let step = 1 / 13, t = step; t <= 1; t += step) {\n        startCap.push(rot(rightPoints[0], points[0].p, C.PI * t))\n      }\n      if (drawEndCap) {\n        let lastPoint = points[len - 1],\n            direction = per(neg(lastPoint.v)),\n            start = proj(lastPoint.p, direction, radius)\n        for (let step = 1 / 13, t = step; t < 1; t += step) {\n          endCap.push(rot(start, lastPoint.p, C.PI * t))\n        }\n      }\n      return leftPoints.concat(endCap, rightPoints.reverse(), startCap)\n    }\n    // Dot case.\n    else if (points.length == 1) {\n      let lastPoint = points[0],\n          direction = per(neg(lastPoint.v)),\n          start = proj(lastPoint.p, direction, size * C.DotSize * lastPoint.r),\n          circle: Vec[] = []\n      for (let step = 1 / 13, t = 0; t <= 2; t += step) {\n        circle.push(rot(start, lastPoint.p, C.PI * t))\n      }\n      return circle\n    }\n    else {\n      return []\n    }\n  }\n\n  /// @internal Increment `length`.\n  updateLength(d: number) {\n    (this as { length: number }).length += d\n  }\n\n  /// @internal Update `sections` incrementally using current `points`.\n  updateSections() {\n    let { sections } = this;\n    // The first 2 points share the same vector, skip them.\n    for (let i = sections.length > 1 ? (sections[sections.length-1] + C.CoolingDown) : 2,\n             len = this.points.length; i < len; i++) {\n      if (this.points[i].d < C.MinDistance &&\n          dot(this.points[i].v, this.points[i-1].v) < 0) {\n        sections.push(i)\n        i += C.CoolingDown\n      }\n    }\n  }\n\n  /// @internal Perform smoothing.\n  updateCurr(p: RawPoint, n: number): RawPoint {\n    this.queue.push(p)\n    while (this.queue.length > n)\n      this.queue.shift()\n    let x = 0, y = 0\n    for (let q of this.queue) {\n      x += q.x\n      y += q.y\n    }\n    n = this.queue.length\n    return { x: x / n, y: y / n, r: p.r }\n  }\n\n  /// Convert this stroke to a JSON-serializable object.\n  toJSON(): any {\n    return this.points.map(p => p.toJSON())\n  }\n\n  /// De-serialize a stroke from its JSON representation.\n  static fromJSON(json: any): Stroke {\n    if (!json || !Array.isArray(json))\n      throw new RangeError(\"Invalid JSON representation for Stroke\")\n    return Stroke.create(json.map(a => ({ x: a[0], y: a[1], r: a[2] })))\n  }\n\n  /// Create a new stroke from raw input.\n  static create(raw: RawPoint[] = []): Stroke {\n    let points: Point[] = [], last_length = 0\n    if (raw.length > 0) {\n      let prev = raw[0], length = 0\n      points.push(new Point(prev, prev.r, { x: 1, y: 1 }, 0, 0))\n      for (let i = 1; i < raw.length; i++) {\n        let curr = raw[i], d = Math.hypot(curr.x - prev.x, curr.y - prev.y)\n        length += d\n        if (length - last_length < C.SkipDistance) {\n          // Skip this point and keep pressure.\n          (points[points.length - 1] as { r: number }).r = curr.r\n          continue;\n        }\n        points.push(new Point(curr, curr.r, norm(sub(prev, curr)), d, length))\n        prev = curr\n        last_length = length\n      }\n      // Even if the last points not get pushed, their distance is added.\n      last_length = length\n    }\n    return new Stroke(points, last_length)\n  }\n}\n\nexport { Input, type InputConfig, type InputEventMap } from './input'\n","import { union, difference, setPrecision } from 'polyclip-ts'\nimport { Input, Stroke, type RawPoint, type Vec } from './src/ink'\nimport { clamp } from './src/vec'\n\nsetPrecision(1e-12)\n\nlet $root = document.getElementById('app')!\nlet $svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg')\nlet $g = document.createElementNS('http://www.w3.org/2000/svg', 'g')\nlet $defs_eraser = document.createElementNS('http://www.w3.org/2000/svg', 'defs')\nlet $settings = {\n  size: document.getElementById('stroke-size') as HTMLInputElement,\n  clear: document.getElementById('clear') as HTMLButtonElement,\n  undo: document.getElementById('undo') as HTMLButtonElement,\n  redo: document.getElementById('redo') as HTMLButtonElement,\n  outline: document.getElementById('outline') as HTMLInputElement,\n  pressure: document.getElementById('pressure') as HTMLInputElement,\n  eraser: document.getElementById('eraser') as HTMLInputElement,\n  data: document.getElementById('data') as HTMLElement,\n}\n\nlet $log = document.getElementById('log')!\nfunction log(...msg: any[]) {\n  $log.append(msg.map(inspect).join(' ') + '\\n')\n  if ($log.childNodes.length > 20)\n    $log.removeChild($log.firstChild!)\n}\nfunction inspect(obj: any): string {\n  if (typeof obj === 'object') {\n    if (typeof obj === 'function') return 'Fn()';\n    if (Array.isArray(obj)) {\n      let str = '[', content = false\n      for (let x of obj) {\n        str += ' ' + inspect(x) + ','\n        content = true\n      }\n      str = content ? str.slice(0, -1) + ' ]' : str + ']'\n      return str\n    } else {\n      let str = '{', content = false\n      for (let key in obj) {\n        str += ' ' + key + ': ' + inspect(obj[key]) + ','\n        content = true\n      }\n      str = content ? str.slice(0, -1) + ' }' : str + '}'\n      return str\n    }\n  } else if (typeof obj === 'number') {\n    return obj.toFixed(1)\n  } else {\n    return '' + obj\n  }\n}\n\nwindow.onerror = function debug(error: any) {\n  log(error)\n}\n\nlet __log = console.log\nconsole.log = function() {\n  log.apply(this, arguments)\n  return __log.apply(this, arguments)\n}\n\nlet renderingMs = 0\nlet bytes = 0, total = 0\nfunction consumeStroke(stroke: Stroke) {\n  try {\n    bytes = JSON.stringify(stroke.toJSON()).length\n    total += bytes\n  } catch (error) {\n    console.error(error)\n  }\n}\nfunction updateData() {\n  $settings.data.textContent = `${renderingMs.toFixed(1)}ms, ${prettyBytes(bytes)} (Total: ${prettyBytes(total)})`\n}\n\nfunction prettyBytes(n: number) {\n  return n < 1024 ? n + ' B' : (n / 1024).toFixed(1) + ' kB'\n}\n\nlet undoStack = {\n  index: 0,\n  // Suppose we have committed 2 strokes:\n  //\n  //   stack = [delete_stroke_1, delete_stroke_2]\n  //                                            ^ index = 2\n  // Now call `undo()`, what happens is index--:\n  //\n  //   stack = [delete_stroke_1, restore_stroke_2]\n  //                           ^ index = 1\n  //                             ^^^^^^^^^^^^^^^^ replace the undo() with redo()\n  stack: [],\n  get undoable(): boolean { return this.index > 0 },\n  get redoable(): boolean { return this.index < this.stack.length },\n  commit(undo: () => void, redo: () => void) {\n    this.stack[this.index] = { undo, redo }\n    this.index += 1\n    // Max 20 steps.\n    while (this.stack.length > 20) {\n      this.stack.shift()\n      this.index -= 1\n    }\n    // Clear all redos.\n    this.stack.length = this.index\n    this.update()\n  },\n  undo() {\n    if (this.undoable) {\n      this.index -= 1\n      this.stack[this.index].undo()\n      this.update()\n    }\n  },\n  redo() {\n    if (this.redoable) {\n      this.stack[this.index].redo()\n      this.index += 1\n      this.update()\n    }\n  },\n  update() {\n    $settings.undo.disabled = !this.undoable\n    $settings.redo.disabled = !this.redoable\n  },\n}\n\nfunction isErasing() { return $settings.eraser.checked }\n\nlet $mask = document.createElementNS('http://www.w3.org/2000/svg', 'mask')\n$settings.eraser.oninput = () => {\n  if (isErasing()) {\n    updateMaskTransform()\n    $defs_eraser.append($mask)\n    $settings.pressure.disabled = true\n  } else {\n    $mask.remove()\n    $settings.pressure.disabled = false\n  }\n}\n$mask.setAttribute('id', 'eraser')\n\nlet $mask_background = document.createElementNS('http://www.w3.org/2000/svg', 'rect')\n$mask_background.setAttribute('width', '100%')\n$mask_background.setAttribute('height', '100%')\n$mask_background.setAttribute('fill', 'white')\n$mask.append($mask_background)\n$g.setAttribute('mask', 'url(#eraser)')\n\n$svg.append($defs_eraser)\n$svg.append($g)\n$root.append($svg)\n\n$settings.clear.onclick = () => {\n  let current = Array.from($g.children)\n  $g.textContent = ''\n  undoStack.commit(\n    () => $g.append(...current),\n    () => $g.textContent = '',\n  )\n}\n\n$settings.undo.onclick = () => undoStack.undo()\n$settings.redo.onclick = () => undoStack.redo()\n\n$g.setAttribute('fill', 'currentColor')\n$settings.outline.oninput = () => {\n  let outline = $settings.outline.checked\n  if (outline) {\n    $g.setAttribute('fill', 'none')\n    $g.setAttribute('stroke', 'currentColor')\n    $g.setAttribute('stroke-width', '1')\n  } else {\n    $g.setAttribute('fill', 'currentColor')\n  }\n}\n\n$svg.setAttribute('fill-rule', 'nonzero')\n$svg.style.cssText = `display: block; width: 100%; height: 100%;\nfont-size: 0; touch-action: none; position: relative; contain: content;\noverflow: hidden; overscroll-behavior: none;`\n\nlet strokes = { __proto__: null } as { [id: number]: [s: Stroke, p: SVGPathElement] }\nlet dirty = { __proto__: null } as { [id: number]: true }\nlet input = Input.create({ dom: $svg, gesture: false })\nlet eraser: { stroke: Stroke, $path: SVGPathElement } | undefined\n\n$settings.pressure.oninput = () => {\n  input.pressure = $settings.pressure.checked\n}\n\nlet transform = { x: 0, y: 0, scale: 1 }\n\n$g.style.transformOrigin = '0 0'\nfunction updateTransform() {\n  let { x, y, scale } = transform\n  $g.style.transform = `scale(${scale}) translate(${x}px, ${y}px)`\n  updateMaskTransform()\n}\n\nfunction updateMaskTransform() {\n  if (isErasing()) {\n    let { x, y, scale } = transform\n    $mask_background.setAttribute('x', '' + -x)\n    $mask_background.setAttribute('y', '' + -y)\n    $mask_background.setAttribute('width', '' + input._rect.width / scale)\n    $mask_background.setAttribute('height', '' + input._rect.height / scale)\n  }\n}\n\nfunction applyTransform(raw: RawPoint) {\n  return { x: raw.x / transform.scale - transform.x, y: raw.y / transform.scale - transform.y, r: raw.r }\n}\n\ninput.on('wheel', (ev) => {\n  let { x, y, scale } = transform\n  if (ev.deltaScale != 0) {\n    let kScale = 1 + ev.deltaScale\n    let k = (1 - 1 / kScale) / scale\n    x -= k * ev.x\n    y -= k * ev.y\n    scale *= kScale\n  }\n  x += ev.deltaX / scale\n  y += ev.deltaY / scale\n  transform = { x, y, scale }\n  updateTransform()\n})\n\ninput.on('open', (id, raw) => {\n  let stroke = Stroke.create([applyTransform(raw)])\n  let $path = document.createElementNS('http://www.w3.org/2000/svg', 'path')\n  $path.style.pointerEvents = 'none'\n  if (isErasing()) {\n    $path.setAttribute('fill', 'black')\n    $mask.append($path)\n    if (eraser) { eraser.$path.remove() }\n    eraser = { stroke, $path }\n  } else {\n    strokes[id] = [stroke, $path]\n    dirty[id] = true\n    $g.append($path)\n    render()\n  }\n})\n\ninput.on('update', (id, raw) => {\n  if (isErasing() && eraser) {\n    let size = $settings.size.valueAsNumber * 2\n    let { stroke, $path } = eraser, d = '', outlines: Vec[][] = []\n    stroke.push(applyTransform(raw))\n    for (let index of stroke.sections) {\n      let outline = stroke.outline(index, size)\n      d += simple_bezier(outline)\n      outlines.push(outline)\n    }\n    $path[OUTLINES] = outlines\n    $path.setAttribute('d', d)\n  } else if (strokes[id]) {\n    let [stroke] = strokes[id]\n    stroke.push(applyTransform(raw))\n    dirty[id] = true\n    render()\n  }\n})\n\ninput.on('cancel', (id) => {\n  if (isErasing() && eraser) {\n    eraser.$path.remove()\n  } else if (strokes[id]) {\n    strokes[id][1].remove()\n    delete strokes[id]\n  }\n})\n\ninput.on('close', (id) => {\n  if (isErasing() && eraser) {\n    let t0 = performance.now()\n    try { erase(eraser) }\n    catch (error) {\n      console.error(error)\n      alert('Failed to erase: ' + error)\n    }\n    finally { eraser.$path.remove() }\n    eraser = void 0\n    renderingMs = performance.now() - t0\n    updateData()\n  } if (strokes[id]) {\n    let [stroke, $path] = strokes[id]\n    let commit = true\n    if (stroke.empty) {\n      $path.remove()\n      commit = false\n    }\n    render()\n    consumeStroke(stroke)\n    updateData()\n    console.info(stroke)\n    delete strokes[id]\n    if (commit) undoStack.commit(\n      () => $path.remove(),\n      // The z-index is not correct, but this demo does not care about it.\n      () => $g.append($path),\n    )\n  }\n})\n\n$svg.ontouchstart = $svg.ontouchmove = $svg.ontouchend = $svg.ontouchcancel = (ev) => {\n  ev.preventDefault()\n  ev.stopPropagation()\n}\n\ndocument.onkeydown = (ev) => {\n  let ctrl = ev.ctrlKey, shift = ev.shiftKey, meta = ev.metaKey, alt = ev.altKey, code = ev.keyCode\n  let primary = input._browser.mac ? meta : ctrl\n\n  const click = (btn: HTMLInputElement | HTMLButtonElement) => {\n    ev.preventDefault()\n    btn.focus(); btn.click()\n  }\n\n  if (!ctrl && !shift && !meta && !alt) {\n    if (code == 79) click($settings.outline);\n    if (code == 80) {\n      if ($settings.pressure.disabled) {\n        click($settings.eraser)\n      } else {\n        click($settings.pressure)\n      }\n    }\n    if (code == 69) click($settings.eraser);\n    if (code == 219 || code == 221) {\n      let size = $settings.size.valueAsNumber, inc = code == 221 ? 5 : -5\n      $settings.size.value = '' + clamp(size + inc, +$settings.size.min, +$settings.size.max)\n    }\n  } else if (primary && !shift && code == 90) {\n    click($settings.undo)\n  } else if (primary && shift && code == 90) {\n    click($settings.redo)\n  }\n}\n\nconst mid = (a: Vec, b: Vec): Vec => ({ x: (a.x + b.x) / 2, y: (a.y + b.y) / 2 })\nconst M = ({ x, y }) => `M${x.toFixed(2)},${y.toFixed(2)}`;\nconst L = ({ x, y }) => `L${x.toFixed(2)},${y.toFixed(2)}`;\nconst Q = (c, { x, y }) => `Q${c.x.toFixed(2)},${c.y.toFixed(2)} ${x.toFixed(2)},${y.toFixed(2)}`;\n\ntype MultiPoly = [x: number, y: number][][][]\nconst OUTLINES = '_outlines'\nconst POLY = '_poly'\n\nfunction render() {\n  let size = $settings.size.valueAsNumber\n  let t0 = performance.now(), working = false\n  for (let id in dirty) {\n    if (strokes[id]) {\n      let [stroke, $path] = strokes[id], d = '', outlines: Vec[][] = []\n      for (let index of stroke.sections) {\n        let outline = stroke.outline(index, size)\n        d += simple_bezier(outline)\n        outlines.push(outline)\n      }\n      $path[OUTLINES] = outlines\n      $path.setAttribute('d', d)\n    }\n    delete dirty[id]\n    working = true\n  }\n  if (working) {\n    renderingMs = performance.now() - t0\n  }\n}\n\nfunction simple_bezier(points: Vec[]) {\n  if (points.length == 0) return '';\n  let prev = points.shift()!, d = M(prev), i = 1;\n  for (let curr of points) {\n    if (i) d += L(mid(prev, curr))\n    d += Q(prev, mid(prev, curr))\n    i = 0\n    prev = curr\n  }\n  return d + L(points[points.length - 1])\n}\n\nfunction geom($path: SVGPathElement): MultiPoly {\n  if ($path[POLY]) return $path[POLY]\n  let outlines = $path[OUTLINES] || [] as Vec[][], poly: MultiPoly = []\n  for (let outline of outlines) {\n    poly = union(poly, [outline.map(v => [v.x, v.y] as const)])\n  }\n  return poly\n}\n\nfunction erase({ $path }: { $path: SVGPathElement }) {\n  let t0 = performance.now()\n  let backup = Array.from($g.children) as SVGPathElement[]\n  let content: [x: number, y: number][][][] = []\n  content = union(content, ...backup.map(geom))\n\n  // PERF: Maybe '1) a - collect close outlines 2) union(a) - eraser 3) union(a + rest)' could be faster.\n  let subtract = geom($path)\n  let result = difference(content, subtract)\n  let current = document.createElementNS('http://www.w3.org/2000/svg', 'path')\n  current.style.pointerEvents = 'none'\n\n  let d = ''\n  for (let poly of result) {\n    for (let ring of poly) {\n      let outline = ring.map(e => ({ x: e[0], y: e[1] }))\n      d += simple_bezier(outline)\n    }\n  }\n  current[POLY] = result\n  current.setAttribute('d', d)\n\n  $g.textContent = ''; $g.append(current)\n\n  undoStack.commit(\n    () => { $g.textContent = ''; $g.append(...backup) },\n    () => { $g.textContent = ''; $g.append(current) },\n  )\n  renderingMs = performance.now() - t0\n  updateData()\n}\n\nObject.assign(window, {\n  debug: { undoStack, strokes, dirty, input, eraser: () => eraser }\n})\n"],"names":["constant","x","compare$1","eps","almostEqual","a","b","orient","almostCollinear","area2","ax","ay","cx","cy","c","isNumeric","mathceil","mathfloor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","clone","configObject","div","convertBase","parseNumeric","P","BigNumber","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","ALPHABET","alphabetHasNormalDecimalDigits","v","alphabet","caseChanged","e","i","isNum","len","str","intCheck","round","obj","p","n","s","out","maxOrMin","pow2_53","random53bitInt","dp","k","rand","args","sum","decimal","toBaseOut","baseIn","baseOut","j","arr","arrL","sign","callerIsToString","d","r","xc","y","rm","toFixedPoint","coeffToString","multiply","base","m","temp","xlo","xhi","carry","klo","khi","compare","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","yc","bitFloor","format","id","c0","ne","toExponential","normalise","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","p1","p2","sd","ni","rd","pows10","valueOf","half","isModExp","nIsBig","nIsNeg","nIsOdd","isOdd","t","xLTy","xe","ye","xcL","ycL","ylo","yhi","zc","sqrtBase","rep","g1","g2","groupSeparator","intPart","fractionPart","isNeg","intDigits","md","d0","d1","d2","exp","n0","n1","z","l","min","max","name","zs","SplayTreeNode","key","__publicField","SplayTreeSetNode","SplayTree","root","right","newTreeRight","left","newTreeLeft","current","comp","currentLeft","currentRight","node","nextLeft","nextRight","result","count","_a","_SplayTreeSet","isValidKey","element","elements","f","nodes","nodeRight","nodeLeft","retainSet","modificationCount","object","other","u","set","copyChildren","dest","newLeft","newRight","SplayTreeSetEntryIterableIterator","SplayTreeKeyIterableIterator","SplayTreeSet","SplayTreeIterableIterator","tree","next","identity","snap","xTree","yTree","snapCoord","coord","precision","isInBbox","bbox","point","getBboxOverlap","b1","b2","lowerX","upperX","lowerY","upperY","crossProduct","dotProduct","length","sineOfAngle","pShared","pBase","pAngle","vBase","vAngle","cosineOfAngle","horizontalIntersection","pt","verticalIntersection","intersection","pt1","v1","pt2","v2","kross","ve","x1","x2","y1","y2","SweepEvent","isLeft","ptCmp","Segment","aPt","bPt","otherEvents","iMax","evt","numEvents","evt1","evt2","events","baseEvent","cache","fillCache","linkedEvent","nextEvent","asine","acosine","bsine","bcosine","segmentId","leftSE","rightSE","rings","windings","alx","blx","arx","brx","aly","bly","ary","bry","aCmpBLeft","bCmpARight","bCmpALeft","aCmpBRight","by","bx","ring","leftPt","rightPt","winding","cmpPts","newRightSE","tBbox","oBbox","bboxOverlap","tlp","trp","olp","orp","touchesOtherLSE","touchesThisLSE","touchesOtherRSE","touchesThisRSE","newEvents","alreadyLinked","newLeftSE","oldRightSE","newSeg","tmpEvt","consumer","consumee","tmp","index","seg","beforeState","ringsAfter","windingsAfter","mpsAfter","polysAfter","polysExclude","poly","mp","mpsBefore","operation","noBefores","noAfters","least","most","diff","isJustSubject","mps","RingIn","geomRing","isExterior","firstPoint","prevPoint","sweepEvents","segment","PolyIn","geomPoly","multiPoly","ringSweepEvents","jMax","MultiPolyIn","geom","isSubject","polySweepEvents","RingOut","allSegments","ringsOut","prevEvent","event","startingPoint","intersectionLEs","availableLEs","firstPt","lastPt","indexLE","intersectionLE","ringEvents","comparator","prevPt","points","nextPt","step","iStart","iEnd","orderedPoints","enclosing","_b","leftMostEvt","prevSeg","prevPrevSeg","PolyOut","exteriorRing","geom0","ringGeom","MultiPolyOut","polyGeom","polys","enclosingRing","SweepLine","queue","nextSeg","prevMySplitter","prevInter","newEventsFromSplit","nextMySplitter","nextInter","mySplitter","inter","Operation","type","moreGeoms","multipolys","geomIn.MultiPolyIn","subject","mpA","sweepLine","geomOut.RingOut","geomOut.MultiPolyOut","operation$1","union","difference","setPrecision","norm","add","sub","mul","per","neg","rot","C","px","py","nx","ny","dot","lerp","proj","clamp","val","Observable","fn","error","Input","paused","gesture","pressure","ev","rect","pinch","Pinch","ev2","id2","ev0","top","ev1","pred","deltaX","deltaY","scale","nav","eventMap","real","config","input","desc","phase","Point","Stroke","from","raw","skip_sections","curr","prev_","prev","size","end","leftPoints","rightPoints","radius","prevPressure","drawEndCap","p3","sp","rp","nextVector","nextDot","offset","pl","pr","startCap","endCap","lastPoint","direction","start","circle","sections","json","last_length","$root","$svg","$g","$defs_eraser","$settings","$log","log","msg","inspect","content","__log","renderingMs","bytes","total","consumeStroke","stroke","updateData","prettyBytes","undoStack","undo","redo","isErasing","$mask","updateMaskTransform","$mask_background","strokes","dirty","eraser","transform","updateTransform","applyTransform","kScale","$path","render","outlines","outline","simple_bezier","OUTLINES","t0","erase","commit","ctrl","shift","meta","alt","code","primary","click","btn","inc","mid","M","L","Q","POLY","working","backup"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}